
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020d4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002274  08002274  00003274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022cc  080022cc  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  080022cc  080022cc  000032cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080022d4  080022d4  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022d4  080022d4  000032d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080022d8  080022d8  000032d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080022dc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000068  08002344  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08002344  000041dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000351f  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f26  00000000  00000000  000075b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000470  00000000  00000000  000084e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000032a  00000000  00000000  00008950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c00  00000000  00000000  00008c7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005250  00000000  00000000  0001e87a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084b00  00000000  00000000  00023aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a85ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001784  00000000  00000000  000a8610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000a9d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800225c 	.word	0x0800225c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800225c 	.word	0x0800225c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000576:	f000 f9c5 	bl	8000904 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800057a:	f000 f81f 	bl	80005bc <SystemClock_Config>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		static uint32_t count = 0;
		uint32_t* pt;
		pt = &count;
 800057e:	4b0c      	ldr	r3, [pc, #48]	@ (80005b0 <main+0x40>)
 8000580:	603b      	str	r3, [r7, #0]
		printf("Hello World = %d\n", count);
 8000582:	4b0b      	ldr	r3, [pc, #44]	@ (80005b0 <main+0x40>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4619      	mov	r1, r3
 8000588:	480a      	ldr	r0, [pc, #40]	@ (80005b4 <main+0x44>)
 800058a:	f000 fff9 	bl	8001580 <iprintf>
		count+=(0x808001);
 800058e:	4b08      	ldr	r3, [pc, #32]	@ (80005b0 <main+0x40>)
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	4b09      	ldr	r3, [pc, #36]	@ (80005b8 <main+0x48>)
 8000594:	4413      	add	r3, r2
 8000596:	4a06      	ldr	r2, [pc, #24]	@ (80005b0 <main+0x40>)
 8000598:	6013      	str	r3, [r2, #0]
//		int array[10];

		for (int i = 0; i < 123; i++) {
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	e002      	b.n	80005a6 <main+0x36>
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3301      	adds	r3, #1
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2b7a      	cmp	r3, #122	@ 0x7a
 80005aa:	ddf9      	ble.n	80005a0 <main+0x30>
	while (1) {
 80005ac:	e7e7      	b.n	800057e <main+0xe>
 80005ae:	bf00      	nop
 80005b0:	20000084 	.word	0x20000084
 80005b4:	08002274 	.word	0x08002274
 80005b8:	00808001 	.word	0x00808001

080005bc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	@ 0x50
 80005c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	@ 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 f82d 	bl	800162a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b27      	ldr	r3, [pc, #156]	@ (8000684 <SystemClock_Config+0xc8>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e8:	4a26      	ldr	r2, [pc, #152]	@ (8000684 <SystemClock_Config+0xc8>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f0:	4b24      	ldr	r3, [pc, #144]	@ (8000684 <SystemClock_Config+0xc8>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b21      	ldr	r3, [pc, #132]	@ (8000688 <SystemClock_Config+0xcc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a20      	ldr	r2, [pc, #128]	@ (8000688 <SystemClock_Config+0xcc>)
 8000606:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b1e      	ldr	r3, [pc, #120]	@ (8000688 <SystemClock_Config+0xcc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000618:	2302      	movs	r3, #2
 800061a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000620:	2310      	movs	r3, #16
 8000622:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000624:	2302      	movs	r3, #2
 8000626:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000628:	2300      	movs	r3, #0
 800062a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800062c:	2308      	movs	r3, #8
 800062e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8000630:	2364      	movs	r3, #100	@ 0x64
 8000632:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000638:	2304      	movs	r3, #4
 800063a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4618      	mov	r0, r3
 8000642:	f000 fab7 	bl	8000bb4 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x94>
		Error_Handler();
 800064c:	f000 f81e 	bl	800068c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2302      	movs	r3, #2
 8000656:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000660:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	2103      	movs	r1, #3
 800066c:	4618      	mov	r0, r3
 800066e:	f000 fd19 	bl	80010a4 <HAL_RCC_ClockConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0xc0>
		Error_Handler();
 8000678:	f000 f808 	bl	800068c <Error_Handler>
	}
}
 800067c:	bf00      	nop
 800067e:	3750      	adds	r7, #80	@ 0x50
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000690:	b672      	cpsid	i
}
 8000692:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <Error_Handler+0x8>

08000698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	4b10      	ldr	r3, [pc, #64]	@ (80006e4 <HAL_MspInit+0x4c>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a6:	4a0f      	ldr	r2, [pc, #60]	@ (80006e4 <HAL_MspInit+0x4c>)
 80006a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ae:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <HAL_MspInit+0x4c>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <HAL_MspInit+0x4c>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c2:	4a08      	ldr	r2, [pc, #32]	@ (80006e4 <HAL_MspInit+0x4c>)
 80006c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ca:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <HAL_MspInit+0x4c>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800

080006e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <NMI_Handler+0x4>

080006f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <HardFault_Handler+0x4>

080006f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <MemManage_Handler+0x4>

08000700 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <BusFault_Handler+0x4>

08000708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <UsageFault_Handler+0x4>

08000710 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr

0800073a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800073e:	f000 f933 	bl	80009a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}

08000746 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	b086      	sub	sp, #24
 800074a:	af00      	add	r7, sp, #0
 800074c:	60f8      	str	r0, [r7, #12]
 800074e:	60b9      	str	r1, [r7, #8]
 8000750:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
 8000756:	e00a      	b.n	800076e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000758:	f3af 8000 	nop.w
 800075c:	4601      	mov	r1, r0
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	1c5a      	adds	r2, r3, #1
 8000762:	60ba      	str	r2, [r7, #8]
 8000764:	b2ca      	uxtb	r2, r1
 8000766:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	3301      	adds	r3, #1
 800076c:	617b      	str	r3, [r7, #20]
 800076e:	697a      	ldr	r2, [r7, #20]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	429a      	cmp	r2, r3
 8000774:	dbf0      	blt.n	8000758 <_read+0x12>
  }

  return len;
 8000776:	687b      	ldr	r3, [r7, #4]
}
 8000778:	4618      	mov	r0, r3
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	e009      	b.n	80007a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	1c5a      	adds	r2, r3, #1
 8000796:	60ba      	str	r2, [r7, #8]
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	4618      	mov	r0, r3
 800079c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	3301      	adds	r3, #1
 80007a4:	617b      	str	r3, [r7, #20]
 80007a6:	697a      	ldr	r2, [r7, #20]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	dbf1      	blt.n	8000792 <_write+0x12>
  }
  return len;
 80007ae:	687b      	ldr	r3, [r7, #4]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3718      	adds	r7, #24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <_close>:

int _close(int file)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007e0:	605a      	str	r2, [r3, #4]
  return 0;
 80007e2:	2300      	movs	r3, #0
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <_isatty>:

int _isatty(int file)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007f8:	2301      	movs	r3, #1
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000806:	b480      	push	{r7}
 8000808:	b085      	sub	sp, #20
 800080a:	af00      	add	r7, sp, #0
 800080c:	60f8      	str	r0, [r7, #12]
 800080e:	60b9      	str	r1, [r7, #8]
 8000810:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000812:	2300      	movs	r3, #0
}
 8000814:	4618      	mov	r0, r3
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000828:	4a14      	ldr	r2, [pc, #80]	@ (800087c <_sbrk+0x5c>)
 800082a:	4b15      	ldr	r3, [pc, #84]	@ (8000880 <_sbrk+0x60>)
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000834:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <_sbrk+0x64>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d102      	bne.n	8000842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800083c:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <_sbrk+0x64>)
 800083e:	4a12      	ldr	r2, [pc, #72]	@ (8000888 <_sbrk+0x68>)
 8000840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000842:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <_sbrk+0x64>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4413      	add	r3, r2
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	429a      	cmp	r2, r3
 800084e:	d207      	bcs.n	8000860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000850:	f000 ff3a 	bl	80016c8 <__errno>
 8000854:	4603      	mov	r3, r0
 8000856:	220c      	movs	r2, #12
 8000858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800085a:	f04f 33ff 	mov.w	r3, #4294967295
 800085e:	e009      	b.n	8000874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000860:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <_sbrk+0x64>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000866:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <_sbrk+0x64>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4413      	add	r3, r2
 800086e:	4a05      	ldr	r2, [pc, #20]	@ (8000884 <_sbrk+0x64>)
 8000870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000872:	68fb      	ldr	r3, [r7, #12]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3718      	adds	r7, #24
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20020000 	.word	0x20020000
 8000880:	00000400 	.word	0x00000400
 8000884:	20000088 	.word	0x20000088
 8000888:	200001e0 	.word	0x200001e0

0800088c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <SystemInit+0x20>)
 8000892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000896:	4a05      	ldr	r2, [pc, #20]	@ (80008ac <SystemInit+0x20>)
 8000898:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800089c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008b4:	f7ff ffea 	bl	800088c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008b8:	480c      	ldr	r0, [pc, #48]	@ (80008ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ba:	490d      	ldr	r1, [pc, #52]	@ (80008f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008bc:	4a0d      	ldr	r2, [pc, #52]	@ (80008f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c0:	e002      	b.n	80008c8 <LoopCopyDataInit>

080008c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c6:	3304      	adds	r3, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008cc:	d3f9      	bcc.n	80008c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ce:	4a0a      	ldr	r2, [pc, #40]	@ (80008f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008d0:	4c0a      	ldr	r4, [pc, #40]	@ (80008fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d4:	e001      	b.n	80008da <LoopFillZerobss>

080008d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d8:	3204      	adds	r2, #4

080008da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008dc:	d3fb      	bcc.n	80008d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008de:	f000 fef9 	bl	80016d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008e2:	f7ff fe45 	bl	8000570 <main>
  bx  lr    
 80008e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80008f4:	080022dc 	.word	0x080022dc
  ldr r2, =_sbss
 80008f8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80008fc:	200001dc 	.word	0x200001dc

08000900 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC_IRQHandler>
	...

08000904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000908:	4b0e      	ldr	r3, [pc, #56]	@ (8000944 <HAL_Init+0x40>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0d      	ldr	r2, [pc, #52]	@ (8000944 <HAL_Init+0x40>)
 800090e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000912:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000914:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <HAL_Init+0x40>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a0a      	ldr	r2, [pc, #40]	@ (8000944 <HAL_Init+0x40>)
 800091a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800091e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000920:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <HAL_Init+0x40>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a07      	ldr	r2, [pc, #28]	@ (8000944 <HAL_Init+0x40>)
 8000926:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800092a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800092c:	2003      	movs	r0, #3
 800092e:	f000 f90d 	bl	8000b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000932:	200f      	movs	r0, #15
 8000934:	f000 f808 	bl	8000948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000938:	f7ff feae 	bl	8000698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023c00 	.word	0x40023c00

08000948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000950:	4b12      	ldr	r3, [pc, #72]	@ (800099c <HAL_InitTick+0x54>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <HAL_InitTick+0x58>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800095e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000962:	fbb2 f3f3 	udiv	r3, r2, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f000 f917 	bl	8000b9a <HAL_SYSTICK_Config>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	e00e      	b.n	8000994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b0f      	cmp	r3, #15
 800097a:	d80a      	bhi.n	8000992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800097c:	2200      	movs	r2, #0
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	f04f 30ff 	mov.w	r0, #4294967295
 8000984:	f000 f8ed 	bl	8000b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000988:	4a06      	ldr	r2, [pc, #24]	@ (80009a4 <HAL_InitTick+0x5c>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800098e:	2300      	movs	r3, #0
 8000990:	e000      	b.n	8000994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
}
 8000994:	4618      	mov	r0, r3
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000000 	.word	0x20000000
 80009a0:	20000008 	.word	0x20000008
 80009a4:	20000004 	.word	0x20000004

080009a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <HAL_IncTick+0x20>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <HAL_IncTick+0x24>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4413      	add	r3, r2
 80009b8:	4a04      	ldr	r2, [pc, #16]	@ (80009cc <HAL_IncTick+0x24>)
 80009ba:	6013      	str	r3, [r2, #0]
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20000008 	.word	0x20000008
 80009cc:	2000008c 	.word	0x2000008c

080009d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return uwTick;
 80009d4:	4b03      	ldr	r3, [pc, #12]	@ (80009e4 <HAL_GetTick+0x14>)
 80009d6:	681b      	ldr	r3, [r3, #0]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	2000008c 	.word	0x2000008c

080009e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a04:	4013      	ands	r3, r2
 8000a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a1a:	4a04      	ldr	r2, [pc, #16]	@ (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	60d3      	str	r3, [r2, #12]
}
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a34:	4b04      	ldr	r3, [pc, #16]	@ (8000a48 <__NVIC_GetPriorityGrouping+0x18>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	0a1b      	lsrs	r3, r3, #8
 8000a3a:	f003 0307 	and.w	r3, r3, #7
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db0a      	blt.n	8000a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	490c      	ldr	r1, [pc, #48]	@ (8000a98 <__NVIC_SetPriority+0x4c>)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	0112      	lsls	r2, r2, #4
 8000a6c:	b2d2      	uxtb	r2, r2
 8000a6e:	440b      	add	r3, r1
 8000a70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a74:	e00a      	b.n	8000a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4908      	ldr	r1, [pc, #32]	@ (8000a9c <__NVIC_SetPriority+0x50>)
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	f003 030f 	and.w	r3, r3, #15
 8000a82:	3b04      	subs	r3, #4
 8000a84:	0112      	lsls	r2, r2, #4
 8000a86:	b2d2      	uxtb	r2, r2
 8000a88:	440b      	add	r3, r1
 8000a8a:	761a      	strb	r2, [r3, #24]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000e100 	.word	0xe000e100
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b089      	sub	sp, #36	@ 0x24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	f1c3 0307 	rsb	r3, r3, #7
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	bf28      	it	cs
 8000abe:	2304      	movcs	r3, #4
 8000ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	2b06      	cmp	r3, #6
 8000ac8:	d902      	bls.n	8000ad0 <NVIC_EncodePriority+0x30>
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3b03      	subs	r3, #3
 8000ace:	e000      	b.n	8000ad2 <NVIC_EncodePriority+0x32>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43da      	mvns	r2, r3
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	fa01 f303 	lsl.w	r3, r1, r3
 8000af2:	43d9      	mvns	r1, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	4313      	orrs	r3, r2
         );
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3724      	adds	r7, #36	@ 0x24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b18:	d301      	bcc.n	8000b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e00f      	b.n	8000b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <SysTick_Config+0x40>)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b26:	210f      	movs	r1, #15
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2c:	f7ff ff8e 	bl	8000a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b30:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <SysTick_Config+0x40>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b36:	4b04      	ldr	r3, [pc, #16]	@ (8000b48 <SysTick_Config+0x40>)
 8000b38:	2207      	movs	r2, #7
 8000b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	e000e010 	.word	0xe000e010

08000b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff ff47 	bl	80009e8 <__NVIC_SetPriorityGrouping>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b086      	sub	sp, #24
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	4603      	mov	r3, r0
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
 8000b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b74:	f7ff ff5c 	bl	8000a30 <__NVIC_GetPriorityGrouping>
 8000b78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	68b9      	ldr	r1, [r7, #8]
 8000b7e:	6978      	ldr	r0, [r7, #20]
 8000b80:	f7ff ff8e 	bl	8000aa0 <NVIC_EncodePriority>
 8000b84:	4602      	mov	r2, r0
 8000b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff5d 	bl	8000a4c <__NVIC_SetPriority>
}
 8000b92:	bf00      	nop
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff ffb0 	bl	8000b08 <SysTick_Config>
 8000ba8:	4603      	mov	r3, r0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d101      	bne.n	8000bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e267      	b.n	8001096 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d075      	beq.n	8000cbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000bd2:	4b88      	ldr	r3, [pc, #544]	@ (8000df4 <HAL_RCC_OscConfig+0x240>)
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	f003 030c 	and.w	r3, r3, #12
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	d00c      	beq.n	8000bf8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bde:	4b85      	ldr	r3, [pc, #532]	@ (8000df4 <HAL_RCC_OscConfig+0x240>)
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000be6:	2b08      	cmp	r3, #8
 8000be8:	d112      	bne.n	8000c10 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bea:	4b82      	ldr	r3, [pc, #520]	@ (8000df4 <HAL_RCC_OscConfig+0x240>)
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bf2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000bf6:	d10b      	bne.n	8000c10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bf8:	4b7e      	ldr	r3, [pc, #504]	@ (8000df4 <HAL_RCC_OscConfig+0x240>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d05b      	beq.n	8000cbc <HAL_RCC_OscConfig+0x108>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d157      	bne.n	8000cbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e242      	b.n	8001096 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c18:	d106      	bne.n	8000c28 <HAL_RCC_OscConfig+0x74>
 8000c1a:	4b76      	ldr	r3, [pc, #472]	@ (8000df4 <HAL_RCC_OscConfig+0x240>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a75      	ldr	r2, [pc, #468]	@ (8000df4 <HAL_RCC_OscConfig+0x240>)
 8000c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c24:	6013      	str	r3, [r2, #0]
 8000c26:	e01d      	b.n	8000c64 <HAL_RCC_OscConfig+0xb0>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000c30:	d10c      	bne.n	8000c4c <HAL_RCC_OscConfig+0x98>
 8000c32:	4b70      	ldr	r3, [pc, #448]	@ (8000df4 <HAL_RCC_OscConfig+0x240>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a6f      	ldr	r2, [pc, #444]	@ (8000df4 <HAL_RCC_OscConfig+0x240>)
 8000c38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c3c:	6013      	str	r3, [r2, #0]
 8000c3e:	4b6d      	ldr	r3, [pc, #436]	@ (8000df4 <HAL_RCC_OscConfig+0x240>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a6c      	ldr	r2, [pc, #432]	@ (8000df4 <HAL_RCC_OscConfig+0x240>)
 8000c44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	e00b      	b.n	8000c64 <HAL_RCC_OscConfig+0xb0>
 8000c4c:	4b69      	ldr	r3, [pc, #420]	@ (8000df4 <HAL_RCC_OscConfig+0x240>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a68      	ldr	r2, [pc, #416]	@ (8000df4 <HAL_RCC_OscConfig+0x240>)
 8000c52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	4b66      	ldr	r3, [pc, #408]	@ (8000df4 <HAL_RCC_OscConfig+0x240>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a65      	ldr	r2, [pc, #404]	@ (8000df4 <HAL_RCC_OscConfig+0x240>)
 8000c5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d013      	beq.n	8000c94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c6c:	f7ff feb0 	bl	80009d0 <HAL_GetTick>
 8000c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c72:	e008      	b.n	8000c86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c74:	f7ff feac 	bl	80009d0 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	2b64      	cmp	r3, #100	@ 0x64
 8000c80:	d901      	bls.n	8000c86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c82:	2303      	movs	r3, #3
 8000c84:	e207      	b.n	8001096 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c86:	4b5b      	ldr	r3, [pc, #364]	@ (8000df4 <HAL_RCC_OscConfig+0x240>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d0f0      	beq.n	8000c74 <HAL_RCC_OscConfig+0xc0>
 8000c92:	e014      	b.n	8000cbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c94:	f7ff fe9c 	bl	80009d0 <HAL_GetTick>
 8000c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c9a:	e008      	b.n	8000cae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c9c:	f7ff fe98 	bl	80009d0 <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b64      	cmp	r3, #100	@ 0x64
 8000ca8:	d901      	bls.n	8000cae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000caa:	2303      	movs	r3, #3
 8000cac:	e1f3      	b.n	8001096 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cae:	4b51      	ldr	r3, [pc, #324]	@ (8000df4 <HAL_RCC_OscConfig+0x240>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1f0      	bne.n	8000c9c <HAL_RCC_OscConfig+0xe8>
 8000cba:	e000      	b.n	8000cbe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d063      	beq.n	8000d92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000cca:	4b4a      	ldr	r3, [pc, #296]	@ (8000df4 <HAL_RCC_OscConfig+0x240>)
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	f003 030c 	and.w	r3, r3, #12
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d00b      	beq.n	8000cee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cd6:	4b47      	ldr	r3, [pc, #284]	@ (8000df4 <HAL_RCC_OscConfig+0x240>)
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000cde:	2b08      	cmp	r3, #8
 8000ce0:	d11c      	bne.n	8000d1c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ce2:	4b44      	ldr	r3, [pc, #272]	@ (8000df4 <HAL_RCC_OscConfig+0x240>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d116      	bne.n	8000d1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cee:	4b41      	ldr	r3, [pc, #260]	@ (8000df4 <HAL_RCC_OscConfig+0x240>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d005      	beq.n	8000d06 <HAL_RCC_OscConfig+0x152>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d001      	beq.n	8000d06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e1c7      	b.n	8001096 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d06:	4b3b      	ldr	r3, [pc, #236]	@ (8000df4 <HAL_RCC_OscConfig+0x240>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	691b      	ldr	r3, [r3, #16]
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	4937      	ldr	r1, [pc, #220]	@ (8000df4 <HAL_RCC_OscConfig+0x240>)
 8000d16:	4313      	orrs	r3, r2
 8000d18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d1a:	e03a      	b.n	8000d92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d020      	beq.n	8000d66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d24:	4b34      	ldr	r3, [pc, #208]	@ (8000df8 <HAL_RCC_OscConfig+0x244>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d2a:	f7ff fe51 	bl	80009d0 <HAL_GetTick>
 8000d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d30:	e008      	b.n	8000d44 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d32:	f7ff fe4d 	bl	80009d0 <HAL_GetTick>
 8000d36:	4602      	mov	r2, r0
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d901      	bls.n	8000d44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d40:	2303      	movs	r3, #3
 8000d42:	e1a8      	b.n	8001096 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d44:	4b2b      	ldr	r3, [pc, #172]	@ (8000df4 <HAL_RCC_OscConfig+0x240>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d0f0      	beq.n	8000d32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d50:	4b28      	ldr	r3, [pc, #160]	@ (8000df4 <HAL_RCC_OscConfig+0x240>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	691b      	ldr	r3, [r3, #16]
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	4925      	ldr	r1, [pc, #148]	@ (8000df4 <HAL_RCC_OscConfig+0x240>)
 8000d60:	4313      	orrs	r3, r2
 8000d62:	600b      	str	r3, [r1, #0]
 8000d64:	e015      	b.n	8000d92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d66:	4b24      	ldr	r3, [pc, #144]	@ (8000df8 <HAL_RCC_OscConfig+0x244>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d6c:	f7ff fe30 	bl	80009d0 <HAL_GetTick>
 8000d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d72:	e008      	b.n	8000d86 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d74:	f7ff fe2c 	bl	80009d0 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d901      	bls.n	8000d86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d82:	2303      	movs	r3, #3
 8000d84:	e187      	b.n	8001096 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d86:	4b1b      	ldr	r3, [pc, #108]	@ (8000df4 <HAL_RCC_OscConfig+0x240>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f0      	bne.n	8000d74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0308 	and.w	r3, r3, #8
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d036      	beq.n	8000e0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d016      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <HAL_RCC_OscConfig+0x248>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dac:	f7ff fe10 	bl	80009d0 <HAL_GetTick>
 8000db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000db2:	e008      	b.n	8000dc6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000db4:	f7ff fe0c 	bl	80009d0 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d901      	bls.n	8000dc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e167      	b.n	8001096 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000df4 <HAL_RCC_OscConfig+0x240>)
 8000dc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d0f0      	beq.n	8000db4 <HAL_RCC_OscConfig+0x200>
 8000dd2:	e01b      	b.n	8000e0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dd4:	4b09      	ldr	r3, [pc, #36]	@ (8000dfc <HAL_RCC_OscConfig+0x248>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dda:	f7ff fdf9 	bl	80009d0 <HAL_GetTick>
 8000dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de0:	e00e      	b.n	8000e00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000de2:	f7ff fdf5 	bl	80009d0 <HAL_GetTick>
 8000de6:	4602      	mov	r2, r0
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d907      	bls.n	8000e00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000df0:	2303      	movs	r3, #3
 8000df2:	e150      	b.n	8001096 <HAL_RCC_OscConfig+0x4e2>
 8000df4:	40023800 	.word	0x40023800
 8000df8:	42470000 	.word	0x42470000
 8000dfc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e00:	4b88      	ldr	r3, [pc, #544]	@ (8001024 <HAL_RCC_OscConfig+0x470>)
 8000e02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000e04:	f003 0302 	and.w	r3, r3, #2
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1ea      	bne.n	8000de2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f000 8097 	beq.w	8000f48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e1e:	4b81      	ldr	r3, [pc, #516]	@ (8001024 <HAL_RCC_OscConfig+0x470>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10f      	bne.n	8000e4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	4b7d      	ldr	r3, [pc, #500]	@ (8001024 <HAL_RCC_OscConfig+0x470>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e32:	4a7c      	ldr	r2, [pc, #496]	@ (8001024 <HAL_RCC_OscConfig+0x470>)
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e3a:	4b7a      	ldr	r3, [pc, #488]	@ (8001024 <HAL_RCC_OscConfig+0x470>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e46:	2301      	movs	r3, #1
 8000e48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e4a:	4b77      	ldr	r3, [pc, #476]	@ (8001028 <HAL_RCC_OscConfig+0x474>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d118      	bne.n	8000e88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e56:	4b74      	ldr	r3, [pc, #464]	@ (8001028 <HAL_RCC_OscConfig+0x474>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a73      	ldr	r2, [pc, #460]	@ (8001028 <HAL_RCC_OscConfig+0x474>)
 8000e5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e62:	f7ff fdb5 	bl	80009d0 <HAL_GetTick>
 8000e66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e68:	e008      	b.n	8000e7c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e6a:	f7ff fdb1 	bl	80009d0 <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d901      	bls.n	8000e7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e10c      	b.n	8001096 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e7c:	4b6a      	ldr	r3, [pc, #424]	@ (8001028 <HAL_RCC_OscConfig+0x474>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0f0      	beq.n	8000e6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d106      	bne.n	8000e9e <HAL_RCC_OscConfig+0x2ea>
 8000e90:	4b64      	ldr	r3, [pc, #400]	@ (8001024 <HAL_RCC_OscConfig+0x470>)
 8000e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e94:	4a63      	ldr	r2, [pc, #396]	@ (8001024 <HAL_RCC_OscConfig+0x470>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8000e9c:	e01c      	b.n	8000ed8 <HAL_RCC_OscConfig+0x324>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	2b05      	cmp	r3, #5
 8000ea4:	d10c      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x30c>
 8000ea6:	4b5f      	ldr	r3, [pc, #380]	@ (8001024 <HAL_RCC_OscConfig+0x470>)
 8000ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000eaa:	4a5e      	ldr	r2, [pc, #376]	@ (8001024 <HAL_RCC_OscConfig+0x470>)
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8000eb2:	4b5c      	ldr	r3, [pc, #368]	@ (8001024 <HAL_RCC_OscConfig+0x470>)
 8000eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000eb6:	4a5b      	ldr	r2, [pc, #364]	@ (8001024 <HAL_RCC_OscConfig+0x470>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6713      	str	r3, [r2, #112]	@ 0x70
 8000ebe:	e00b      	b.n	8000ed8 <HAL_RCC_OscConfig+0x324>
 8000ec0:	4b58      	ldr	r3, [pc, #352]	@ (8001024 <HAL_RCC_OscConfig+0x470>)
 8000ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000ec4:	4a57      	ldr	r2, [pc, #348]	@ (8001024 <HAL_RCC_OscConfig+0x470>)
 8000ec6:	f023 0301 	bic.w	r3, r3, #1
 8000eca:	6713      	str	r3, [r2, #112]	@ 0x70
 8000ecc:	4b55      	ldr	r3, [pc, #340]	@ (8001024 <HAL_RCC_OscConfig+0x470>)
 8000ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000ed0:	4a54      	ldr	r2, [pc, #336]	@ (8001024 <HAL_RCC_OscConfig+0x470>)
 8000ed2:	f023 0304 	bic.w	r3, r3, #4
 8000ed6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d015      	beq.n	8000f0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ee0:	f7ff fd76 	bl	80009d0 <HAL_GetTick>
 8000ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ee6:	e00a      	b.n	8000efe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ee8:	f7ff fd72 	bl	80009d0 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d901      	bls.n	8000efe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e0cb      	b.n	8001096 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000efe:	4b49      	ldr	r3, [pc, #292]	@ (8001024 <HAL_RCC_OscConfig+0x470>)
 8000f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d0ee      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x334>
 8000f0a:	e014      	b.n	8000f36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f0c:	f7ff fd60 	bl	80009d0 <HAL_GetTick>
 8000f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f12:	e00a      	b.n	8000f2a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f14:	f7ff fd5c 	bl	80009d0 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e0b5      	b.n	8001096 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f2a:	4b3e      	ldr	r3, [pc, #248]	@ (8001024 <HAL_RCC_OscConfig+0x470>)
 8000f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1ee      	bne.n	8000f14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000f36:	7dfb      	ldrb	r3, [r7, #23]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d105      	bne.n	8000f48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f3c:	4b39      	ldr	r3, [pc, #228]	@ (8001024 <HAL_RCC_OscConfig+0x470>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f40:	4a38      	ldr	r2, [pc, #224]	@ (8001024 <HAL_RCC_OscConfig+0x470>)
 8000f42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000f46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f000 80a1 	beq.w	8001094 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f52:	4b34      	ldr	r3, [pc, #208]	@ (8001024 <HAL_RCC_OscConfig+0x470>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f003 030c 	and.w	r3, r3, #12
 8000f5a:	2b08      	cmp	r3, #8
 8000f5c:	d05c      	beq.n	8001018 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d141      	bne.n	8000fea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f66:	4b31      	ldr	r3, [pc, #196]	@ (800102c <HAL_RCC_OscConfig+0x478>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f6c:	f7ff fd30 	bl	80009d0 <HAL_GetTick>
 8000f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f72:	e008      	b.n	8000f86 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f74:	f7ff fd2c 	bl	80009d0 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d901      	bls.n	8000f86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e087      	b.n	8001096 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f86:	4b27      	ldr	r3, [pc, #156]	@ (8001024 <HAL_RCC_OscConfig+0x470>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1f0      	bne.n	8000f74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69da      	ldr	r2, [r3, #28]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6a1b      	ldr	r3, [r3, #32]
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa0:	019b      	lsls	r3, r3, #6
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fa8:	085b      	lsrs	r3, r3, #1
 8000faa:	3b01      	subs	r3, #1
 8000fac:	041b      	lsls	r3, r3, #16
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fb4:	061b      	lsls	r3, r3, #24
 8000fb6:	491b      	ldr	r1, [pc, #108]	@ (8001024 <HAL_RCC_OscConfig+0x470>)
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800102c <HAL_RCC_OscConfig+0x478>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc2:	f7ff fd05 	bl	80009d0 <HAL_GetTick>
 8000fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fc8:	e008      	b.n	8000fdc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fca:	f7ff fd01 	bl	80009d0 <HAL_GetTick>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d901      	bls.n	8000fdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e05c      	b.n	8001096 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fdc:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <HAL_RCC_OscConfig+0x470>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d0f0      	beq.n	8000fca <HAL_RCC_OscConfig+0x416>
 8000fe8:	e054      	b.n	8001094 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fea:	4b10      	ldr	r3, [pc, #64]	@ (800102c <HAL_RCC_OscConfig+0x478>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fcee 	bl	80009d0 <HAL_GetTick>
 8000ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ff8:	f7ff fcea 	bl	80009d0 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e045      	b.n	8001096 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800100a:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <HAL_RCC_OscConfig+0x470>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1f0      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x444>
 8001016:	e03d      	b.n	8001094 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d107      	bne.n	8001030 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e038      	b.n	8001096 <HAL_RCC_OscConfig+0x4e2>
 8001024:	40023800 	.word	0x40023800
 8001028:	40007000 	.word	0x40007000
 800102c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001030:	4b1b      	ldr	r3, [pc, #108]	@ (80010a0 <HAL_RCC_OscConfig+0x4ec>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d028      	beq.n	8001090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001048:	429a      	cmp	r2, r3
 800104a:	d121      	bne.n	8001090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001056:	429a      	cmp	r2, r3
 8001058:	d11a      	bne.n	8001090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001060:	4013      	ands	r3, r2
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001066:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001068:	4293      	cmp	r3, r2
 800106a:	d111      	bne.n	8001090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001076:	085b      	lsrs	r3, r3, #1
 8001078:	3b01      	subs	r3, #1
 800107a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800107c:	429a      	cmp	r2, r3
 800107e:	d107      	bne.n	8001090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800108a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800108c:	429a      	cmp	r2, r3
 800108e:	d001      	beq.n	8001094 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e000      	b.n	8001096 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800

080010a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d101      	bne.n	80010b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e0cc      	b.n	8001252 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010b8:	4b68      	ldr	r3, [pc, #416]	@ (800125c <HAL_RCC_ClockConfig+0x1b8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d90c      	bls.n	80010e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010c6:	4b65      	ldr	r3, [pc, #404]	@ (800125c <HAL_RCC_ClockConfig+0x1b8>)
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ce:	4b63      	ldr	r3, [pc, #396]	@ (800125c <HAL_RCC_ClockConfig+0x1b8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	683a      	ldr	r2, [r7, #0]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d001      	beq.n	80010e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e0b8      	b.n	8001252 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d020      	beq.n	800112e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d005      	beq.n	8001104 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010f8:	4b59      	ldr	r3, [pc, #356]	@ (8001260 <HAL_RCC_ClockConfig+0x1bc>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	4a58      	ldr	r2, [pc, #352]	@ (8001260 <HAL_RCC_ClockConfig+0x1bc>)
 80010fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001102:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0308 	and.w	r3, r3, #8
 800110c:	2b00      	cmp	r3, #0
 800110e:	d005      	beq.n	800111c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001110:	4b53      	ldr	r3, [pc, #332]	@ (8001260 <HAL_RCC_ClockConfig+0x1bc>)
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	4a52      	ldr	r2, [pc, #328]	@ (8001260 <HAL_RCC_ClockConfig+0x1bc>)
 8001116:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800111a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800111c:	4b50      	ldr	r3, [pc, #320]	@ (8001260 <HAL_RCC_ClockConfig+0x1bc>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	494d      	ldr	r1, [pc, #308]	@ (8001260 <HAL_RCC_ClockConfig+0x1bc>)
 800112a:	4313      	orrs	r3, r2
 800112c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	2b00      	cmp	r3, #0
 8001138:	d044      	beq.n	80011c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d107      	bne.n	8001152 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001142:	4b47      	ldr	r3, [pc, #284]	@ (8001260 <HAL_RCC_ClockConfig+0x1bc>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d119      	bne.n	8001182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e07f      	b.n	8001252 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b02      	cmp	r3, #2
 8001158:	d003      	beq.n	8001162 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800115e:	2b03      	cmp	r3, #3
 8001160:	d107      	bne.n	8001172 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001162:	4b3f      	ldr	r3, [pc, #252]	@ (8001260 <HAL_RCC_ClockConfig+0x1bc>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d109      	bne.n	8001182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e06f      	b.n	8001252 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001172:	4b3b      	ldr	r3, [pc, #236]	@ (8001260 <HAL_RCC_ClockConfig+0x1bc>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e067      	b.n	8001252 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001182:	4b37      	ldr	r3, [pc, #220]	@ (8001260 <HAL_RCC_ClockConfig+0x1bc>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f023 0203 	bic.w	r2, r3, #3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	4934      	ldr	r1, [pc, #208]	@ (8001260 <HAL_RCC_ClockConfig+0x1bc>)
 8001190:	4313      	orrs	r3, r2
 8001192:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001194:	f7ff fc1c 	bl	80009d0 <HAL_GetTick>
 8001198:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800119a:	e00a      	b.n	80011b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800119c:	f7ff fc18 	bl	80009d0 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e04f      	b.n	8001252 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001260 <HAL_RCC_ClockConfig+0x1bc>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 020c 	and.w	r2, r3, #12
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d1eb      	bne.n	800119c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011c4:	4b25      	ldr	r3, [pc, #148]	@ (800125c <HAL_RCC_ClockConfig+0x1b8>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d20c      	bcs.n	80011ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011d2:	4b22      	ldr	r3, [pc, #136]	@ (800125c <HAL_RCC_ClockConfig+0x1b8>)
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011da:	4b20      	ldr	r3, [pc, #128]	@ (800125c <HAL_RCC_ClockConfig+0x1b8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d001      	beq.n	80011ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e032      	b.n	8001252 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0304 	and.w	r3, r3, #4
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d008      	beq.n	800120a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011f8:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <HAL_RCC_ClockConfig+0x1bc>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	4916      	ldr	r1, [pc, #88]	@ (8001260 <HAL_RCC_ClockConfig+0x1bc>)
 8001206:	4313      	orrs	r3, r2
 8001208:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0308 	and.w	r3, r3, #8
 8001212:	2b00      	cmp	r3, #0
 8001214:	d009      	beq.n	800122a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001216:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <HAL_RCC_ClockConfig+0x1bc>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	490e      	ldr	r1, [pc, #56]	@ (8001260 <HAL_RCC_ClockConfig+0x1bc>)
 8001226:	4313      	orrs	r3, r2
 8001228:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800122a:	f000 f821 	bl	8001270 <HAL_RCC_GetSysClockFreq>
 800122e:	4602      	mov	r2, r0
 8001230:	4b0b      	ldr	r3, [pc, #44]	@ (8001260 <HAL_RCC_ClockConfig+0x1bc>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	091b      	lsrs	r3, r3, #4
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	490a      	ldr	r1, [pc, #40]	@ (8001264 <HAL_RCC_ClockConfig+0x1c0>)
 800123c:	5ccb      	ldrb	r3, [r1, r3]
 800123e:	fa22 f303 	lsr.w	r3, r2, r3
 8001242:	4a09      	ldr	r2, [pc, #36]	@ (8001268 <HAL_RCC_ClockConfig+0x1c4>)
 8001244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001246:	4b09      	ldr	r3, [pc, #36]	@ (800126c <HAL_RCC_ClockConfig+0x1c8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fb7c 	bl	8000948 <HAL_InitTick>

  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023c00 	.word	0x40023c00
 8001260:	40023800 	.word	0x40023800
 8001264:	08002288 	.word	0x08002288
 8001268:	20000000 	.word	0x20000000
 800126c:	20000004 	.word	0x20000004

08001270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001274:	b090      	sub	sp, #64	@ 0x40
 8001276:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001278:	2300      	movs	r3, #0
 800127a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800127c:	2300      	movs	r3, #0
 800127e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001280:	2300      	movs	r3, #0
 8001282:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001284:	2300      	movs	r3, #0
 8001286:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001288:	4b59      	ldr	r3, [pc, #356]	@ (80013f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 030c 	and.w	r3, r3, #12
 8001290:	2b08      	cmp	r3, #8
 8001292:	d00d      	beq.n	80012b0 <HAL_RCC_GetSysClockFreq+0x40>
 8001294:	2b08      	cmp	r3, #8
 8001296:	f200 80a1 	bhi.w	80013dc <HAL_RCC_GetSysClockFreq+0x16c>
 800129a:	2b00      	cmp	r3, #0
 800129c:	d002      	beq.n	80012a4 <HAL_RCC_GetSysClockFreq+0x34>
 800129e:	2b04      	cmp	r3, #4
 80012a0:	d003      	beq.n	80012aa <HAL_RCC_GetSysClockFreq+0x3a>
 80012a2:	e09b      	b.n	80013dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012a4:	4b53      	ldr	r3, [pc, #332]	@ (80013f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80012a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80012a8:	e09b      	b.n	80013e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012aa:	4b53      	ldr	r3, [pc, #332]	@ (80013f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80012ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80012ae:	e098      	b.n	80013e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012b0:	4b4f      	ldr	r3, [pc, #316]	@ (80013f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80012b8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012ba:	4b4d      	ldr	r3, [pc, #308]	@ (80013f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d028      	beq.n	8001318 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012c6:	4b4a      	ldr	r3, [pc, #296]	@ (80013f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	099b      	lsrs	r3, r3, #6
 80012cc:	2200      	movs	r2, #0
 80012ce:	623b      	str	r3, [r7, #32]
 80012d0:	627a      	str	r2, [r7, #36]	@ 0x24
 80012d2:	6a3b      	ldr	r3, [r7, #32]
 80012d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80012d8:	2100      	movs	r1, #0
 80012da:	4b47      	ldr	r3, [pc, #284]	@ (80013f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80012dc:	fb03 f201 	mul.w	r2, r3, r1
 80012e0:	2300      	movs	r3, #0
 80012e2:	fb00 f303 	mul.w	r3, r0, r3
 80012e6:	4413      	add	r3, r2
 80012e8:	4a43      	ldr	r2, [pc, #268]	@ (80013f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80012ea:	fba0 1202 	umull	r1, r2, r0, r2
 80012ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80012f0:	460a      	mov	r2, r1
 80012f2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80012f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012f6:	4413      	add	r3, r2
 80012f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012fc:	2200      	movs	r2, #0
 80012fe:	61bb      	str	r3, [r7, #24]
 8001300:	61fa      	str	r2, [r7, #28]
 8001302:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001306:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800130a:	f7fe ffb9 	bl	8000280 <__aeabi_uldivmod>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4613      	mov	r3, r2
 8001314:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001316:	e053      	b.n	80013c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001318:	4b35      	ldr	r3, [pc, #212]	@ (80013f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	099b      	lsrs	r3, r3, #6
 800131e:	2200      	movs	r2, #0
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	617a      	str	r2, [r7, #20]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800132a:	f04f 0b00 	mov.w	fp, #0
 800132e:	4652      	mov	r2, sl
 8001330:	465b      	mov	r3, fp
 8001332:	f04f 0000 	mov.w	r0, #0
 8001336:	f04f 0100 	mov.w	r1, #0
 800133a:	0159      	lsls	r1, r3, #5
 800133c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001340:	0150      	lsls	r0, r2, #5
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	ebb2 080a 	subs.w	r8, r2, sl
 800134a:	eb63 090b 	sbc.w	r9, r3, fp
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	f04f 0300 	mov.w	r3, #0
 8001356:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800135a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800135e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001362:	ebb2 0408 	subs.w	r4, r2, r8
 8001366:	eb63 0509 	sbc.w	r5, r3, r9
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	f04f 0300 	mov.w	r3, #0
 8001372:	00eb      	lsls	r3, r5, #3
 8001374:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001378:	00e2      	lsls	r2, r4, #3
 800137a:	4614      	mov	r4, r2
 800137c:	461d      	mov	r5, r3
 800137e:	eb14 030a 	adds.w	r3, r4, sl
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	eb45 030b 	adc.w	r3, r5, fp
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	f04f 0300 	mov.w	r3, #0
 8001392:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001396:	4629      	mov	r1, r5
 8001398:	028b      	lsls	r3, r1, #10
 800139a:	4621      	mov	r1, r4
 800139c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80013a0:	4621      	mov	r1, r4
 80013a2:	028a      	lsls	r2, r1, #10
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013aa:	2200      	movs	r2, #0
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	60fa      	str	r2, [r7, #12]
 80013b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013b4:	f7fe ff64 	bl	8000280 <__aeabi_uldivmod>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4613      	mov	r3, r2
 80013be:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80013c0:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	0c1b      	lsrs	r3, r3, #16
 80013c6:	f003 0303 	and.w	r3, r3, #3
 80013ca:	3301      	adds	r3, #1
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80013d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80013d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80013da:	e002      	b.n	80013e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80013dc:	4b05      	ldr	r3, [pc, #20]	@ (80013f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80013de:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80013e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3740      	adds	r7, #64	@ 0x40
 80013e8:	46bd      	mov	sp, r7
 80013ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800
 80013f4:	00f42400 	.word	0x00f42400
 80013f8:	017d7840 	.word	0x017d7840

080013fc <std>:
 80013fc:	2300      	movs	r3, #0
 80013fe:	b510      	push	{r4, lr}
 8001400:	4604      	mov	r4, r0
 8001402:	e9c0 3300 	strd	r3, r3, [r0]
 8001406:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800140a:	6083      	str	r3, [r0, #8]
 800140c:	8181      	strh	r1, [r0, #12]
 800140e:	6643      	str	r3, [r0, #100]	@ 0x64
 8001410:	81c2      	strh	r2, [r0, #14]
 8001412:	6183      	str	r3, [r0, #24]
 8001414:	4619      	mov	r1, r3
 8001416:	2208      	movs	r2, #8
 8001418:	305c      	adds	r0, #92	@ 0x5c
 800141a:	f000 f906 	bl	800162a <memset>
 800141e:	4b0d      	ldr	r3, [pc, #52]	@ (8001454 <std+0x58>)
 8001420:	6263      	str	r3, [r4, #36]	@ 0x24
 8001422:	4b0d      	ldr	r3, [pc, #52]	@ (8001458 <std+0x5c>)
 8001424:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001426:	4b0d      	ldr	r3, [pc, #52]	@ (800145c <std+0x60>)
 8001428:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800142a:	4b0d      	ldr	r3, [pc, #52]	@ (8001460 <std+0x64>)
 800142c:	6323      	str	r3, [r4, #48]	@ 0x30
 800142e:	4b0d      	ldr	r3, [pc, #52]	@ (8001464 <std+0x68>)
 8001430:	6224      	str	r4, [r4, #32]
 8001432:	429c      	cmp	r4, r3
 8001434:	d006      	beq.n	8001444 <std+0x48>
 8001436:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800143a:	4294      	cmp	r4, r2
 800143c:	d002      	beq.n	8001444 <std+0x48>
 800143e:	33d0      	adds	r3, #208	@ 0xd0
 8001440:	429c      	cmp	r4, r3
 8001442:	d105      	bne.n	8001450 <std+0x54>
 8001444:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800144c:	f000 b966 	b.w	800171c <__retarget_lock_init_recursive>
 8001450:	bd10      	pop	{r4, pc}
 8001452:	bf00      	nop
 8001454:	080015a5 	.word	0x080015a5
 8001458:	080015c7 	.word	0x080015c7
 800145c:	080015ff 	.word	0x080015ff
 8001460:	08001623 	.word	0x08001623
 8001464:	20000090 	.word	0x20000090

08001468 <stdio_exit_handler>:
 8001468:	4a02      	ldr	r2, [pc, #8]	@ (8001474 <stdio_exit_handler+0xc>)
 800146a:	4903      	ldr	r1, [pc, #12]	@ (8001478 <stdio_exit_handler+0x10>)
 800146c:	4803      	ldr	r0, [pc, #12]	@ (800147c <stdio_exit_handler+0x14>)
 800146e:	f000 b869 	b.w	8001544 <_fwalk_sglue>
 8001472:	bf00      	nop
 8001474:	2000000c 	.word	0x2000000c
 8001478:	08001fbd 	.word	0x08001fbd
 800147c:	2000001c 	.word	0x2000001c

08001480 <cleanup_stdio>:
 8001480:	6841      	ldr	r1, [r0, #4]
 8001482:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <cleanup_stdio+0x34>)
 8001484:	4299      	cmp	r1, r3
 8001486:	b510      	push	{r4, lr}
 8001488:	4604      	mov	r4, r0
 800148a:	d001      	beq.n	8001490 <cleanup_stdio+0x10>
 800148c:	f000 fd96 	bl	8001fbc <_fflush_r>
 8001490:	68a1      	ldr	r1, [r4, #8]
 8001492:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <cleanup_stdio+0x38>)
 8001494:	4299      	cmp	r1, r3
 8001496:	d002      	beq.n	800149e <cleanup_stdio+0x1e>
 8001498:	4620      	mov	r0, r4
 800149a:	f000 fd8f 	bl	8001fbc <_fflush_r>
 800149e:	68e1      	ldr	r1, [r4, #12]
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <cleanup_stdio+0x3c>)
 80014a2:	4299      	cmp	r1, r3
 80014a4:	d004      	beq.n	80014b0 <cleanup_stdio+0x30>
 80014a6:	4620      	mov	r0, r4
 80014a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014ac:	f000 bd86 	b.w	8001fbc <_fflush_r>
 80014b0:	bd10      	pop	{r4, pc}
 80014b2:	bf00      	nop
 80014b4:	20000090 	.word	0x20000090
 80014b8:	200000f8 	.word	0x200000f8
 80014bc:	20000160 	.word	0x20000160

080014c0 <global_stdio_init.part.0>:
 80014c0:	b510      	push	{r4, lr}
 80014c2:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <global_stdio_init.part.0+0x30>)
 80014c4:	4c0b      	ldr	r4, [pc, #44]	@ (80014f4 <global_stdio_init.part.0+0x34>)
 80014c6:	4a0c      	ldr	r2, [pc, #48]	@ (80014f8 <global_stdio_init.part.0+0x38>)
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	4620      	mov	r0, r4
 80014cc:	2200      	movs	r2, #0
 80014ce:	2104      	movs	r1, #4
 80014d0:	f7ff ff94 	bl	80013fc <std>
 80014d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80014d8:	2201      	movs	r2, #1
 80014da:	2109      	movs	r1, #9
 80014dc:	f7ff ff8e 	bl	80013fc <std>
 80014e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80014e4:	2202      	movs	r2, #2
 80014e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014ea:	2112      	movs	r1, #18
 80014ec:	f7ff bf86 	b.w	80013fc <std>
 80014f0:	200001c8 	.word	0x200001c8
 80014f4:	20000090 	.word	0x20000090
 80014f8:	08001469 	.word	0x08001469

080014fc <__sfp_lock_acquire>:
 80014fc:	4801      	ldr	r0, [pc, #4]	@ (8001504 <__sfp_lock_acquire+0x8>)
 80014fe:	f000 b90e 	b.w	800171e <__retarget_lock_acquire_recursive>
 8001502:	bf00      	nop
 8001504:	200001d1 	.word	0x200001d1

08001508 <__sfp_lock_release>:
 8001508:	4801      	ldr	r0, [pc, #4]	@ (8001510 <__sfp_lock_release+0x8>)
 800150a:	f000 b909 	b.w	8001720 <__retarget_lock_release_recursive>
 800150e:	bf00      	nop
 8001510:	200001d1 	.word	0x200001d1

08001514 <__sinit>:
 8001514:	b510      	push	{r4, lr}
 8001516:	4604      	mov	r4, r0
 8001518:	f7ff fff0 	bl	80014fc <__sfp_lock_acquire>
 800151c:	6a23      	ldr	r3, [r4, #32]
 800151e:	b11b      	cbz	r3, 8001528 <__sinit+0x14>
 8001520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001524:	f7ff bff0 	b.w	8001508 <__sfp_lock_release>
 8001528:	4b04      	ldr	r3, [pc, #16]	@ (800153c <__sinit+0x28>)
 800152a:	6223      	str	r3, [r4, #32]
 800152c:	4b04      	ldr	r3, [pc, #16]	@ (8001540 <__sinit+0x2c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1f5      	bne.n	8001520 <__sinit+0xc>
 8001534:	f7ff ffc4 	bl	80014c0 <global_stdio_init.part.0>
 8001538:	e7f2      	b.n	8001520 <__sinit+0xc>
 800153a:	bf00      	nop
 800153c:	08001481 	.word	0x08001481
 8001540:	200001c8 	.word	0x200001c8

08001544 <_fwalk_sglue>:
 8001544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001548:	4607      	mov	r7, r0
 800154a:	4688      	mov	r8, r1
 800154c:	4614      	mov	r4, r2
 800154e:	2600      	movs	r6, #0
 8001550:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001554:	f1b9 0901 	subs.w	r9, r9, #1
 8001558:	d505      	bpl.n	8001566 <_fwalk_sglue+0x22>
 800155a:	6824      	ldr	r4, [r4, #0]
 800155c:	2c00      	cmp	r4, #0
 800155e:	d1f7      	bne.n	8001550 <_fwalk_sglue+0xc>
 8001560:	4630      	mov	r0, r6
 8001562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001566:	89ab      	ldrh	r3, [r5, #12]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d907      	bls.n	800157c <_fwalk_sglue+0x38>
 800156c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001570:	3301      	adds	r3, #1
 8001572:	d003      	beq.n	800157c <_fwalk_sglue+0x38>
 8001574:	4629      	mov	r1, r5
 8001576:	4638      	mov	r0, r7
 8001578:	47c0      	blx	r8
 800157a:	4306      	orrs	r6, r0
 800157c:	3568      	adds	r5, #104	@ 0x68
 800157e:	e7e9      	b.n	8001554 <_fwalk_sglue+0x10>

08001580 <iprintf>:
 8001580:	b40f      	push	{r0, r1, r2, r3}
 8001582:	b507      	push	{r0, r1, r2, lr}
 8001584:	4906      	ldr	r1, [pc, #24]	@ (80015a0 <iprintf+0x20>)
 8001586:	ab04      	add	r3, sp, #16
 8001588:	6808      	ldr	r0, [r1, #0]
 800158a:	f853 2b04 	ldr.w	r2, [r3], #4
 800158e:	6881      	ldr	r1, [r0, #8]
 8001590:	9301      	str	r3, [sp, #4]
 8001592:	f000 f9e9 	bl	8001968 <_vfiprintf_r>
 8001596:	b003      	add	sp, #12
 8001598:	f85d eb04 	ldr.w	lr, [sp], #4
 800159c:	b004      	add	sp, #16
 800159e:	4770      	bx	lr
 80015a0:	20000018 	.word	0x20000018

080015a4 <__sread>:
 80015a4:	b510      	push	{r4, lr}
 80015a6:	460c      	mov	r4, r1
 80015a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015ac:	f000 f868 	bl	8001680 <_read_r>
 80015b0:	2800      	cmp	r0, #0
 80015b2:	bfab      	itete	ge
 80015b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80015b6:	89a3      	ldrhlt	r3, [r4, #12]
 80015b8:	181b      	addge	r3, r3, r0
 80015ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80015be:	bfac      	ite	ge
 80015c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80015c2:	81a3      	strhlt	r3, [r4, #12]
 80015c4:	bd10      	pop	{r4, pc}

080015c6 <__swrite>:
 80015c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015ca:	461f      	mov	r7, r3
 80015cc:	898b      	ldrh	r3, [r1, #12]
 80015ce:	05db      	lsls	r3, r3, #23
 80015d0:	4605      	mov	r5, r0
 80015d2:	460c      	mov	r4, r1
 80015d4:	4616      	mov	r6, r2
 80015d6:	d505      	bpl.n	80015e4 <__swrite+0x1e>
 80015d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015dc:	2302      	movs	r3, #2
 80015de:	2200      	movs	r2, #0
 80015e0:	f000 f83c 	bl	800165c <_lseek_r>
 80015e4:	89a3      	ldrh	r3, [r4, #12]
 80015e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80015ee:	81a3      	strh	r3, [r4, #12]
 80015f0:	4632      	mov	r2, r6
 80015f2:	463b      	mov	r3, r7
 80015f4:	4628      	mov	r0, r5
 80015f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80015fa:	f000 b853 	b.w	80016a4 <_write_r>

080015fe <__sseek>:
 80015fe:	b510      	push	{r4, lr}
 8001600:	460c      	mov	r4, r1
 8001602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001606:	f000 f829 	bl	800165c <_lseek_r>
 800160a:	1c43      	adds	r3, r0, #1
 800160c:	89a3      	ldrh	r3, [r4, #12]
 800160e:	bf15      	itete	ne
 8001610:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001612:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001616:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800161a:	81a3      	strheq	r3, [r4, #12]
 800161c:	bf18      	it	ne
 800161e:	81a3      	strhne	r3, [r4, #12]
 8001620:	bd10      	pop	{r4, pc}

08001622 <__sclose>:
 8001622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001626:	f000 b809 	b.w	800163c <_close_r>

0800162a <memset>:
 800162a:	4402      	add	r2, r0
 800162c:	4603      	mov	r3, r0
 800162e:	4293      	cmp	r3, r2
 8001630:	d100      	bne.n	8001634 <memset+0xa>
 8001632:	4770      	bx	lr
 8001634:	f803 1b01 	strb.w	r1, [r3], #1
 8001638:	e7f9      	b.n	800162e <memset+0x4>
	...

0800163c <_close_r>:
 800163c:	b538      	push	{r3, r4, r5, lr}
 800163e:	4d06      	ldr	r5, [pc, #24]	@ (8001658 <_close_r+0x1c>)
 8001640:	2300      	movs	r3, #0
 8001642:	4604      	mov	r4, r0
 8001644:	4608      	mov	r0, r1
 8001646:	602b      	str	r3, [r5, #0]
 8001648:	f7ff f8b6 	bl	80007b8 <_close>
 800164c:	1c43      	adds	r3, r0, #1
 800164e:	d102      	bne.n	8001656 <_close_r+0x1a>
 8001650:	682b      	ldr	r3, [r5, #0]
 8001652:	b103      	cbz	r3, 8001656 <_close_r+0x1a>
 8001654:	6023      	str	r3, [r4, #0]
 8001656:	bd38      	pop	{r3, r4, r5, pc}
 8001658:	200001cc 	.word	0x200001cc

0800165c <_lseek_r>:
 800165c:	b538      	push	{r3, r4, r5, lr}
 800165e:	4d07      	ldr	r5, [pc, #28]	@ (800167c <_lseek_r+0x20>)
 8001660:	4604      	mov	r4, r0
 8001662:	4608      	mov	r0, r1
 8001664:	4611      	mov	r1, r2
 8001666:	2200      	movs	r2, #0
 8001668:	602a      	str	r2, [r5, #0]
 800166a:	461a      	mov	r2, r3
 800166c:	f7ff f8cb 	bl	8000806 <_lseek>
 8001670:	1c43      	adds	r3, r0, #1
 8001672:	d102      	bne.n	800167a <_lseek_r+0x1e>
 8001674:	682b      	ldr	r3, [r5, #0]
 8001676:	b103      	cbz	r3, 800167a <_lseek_r+0x1e>
 8001678:	6023      	str	r3, [r4, #0]
 800167a:	bd38      	pop	{r3, r4, r5, pc}
 800167c:	200001cc 	.word	0x200001cc

08001680 <_read_r>:
 8001680:	b538      	push	{r3, r4, r5, lr}
 8001682:	4d07      	ldr	r5, [pc, #28]	@ (80016a0 <_read_r+0x20>)
 8001684:	4604      	mov	r4, r0
 8001686:	4608      	mov	r0, r1
 8001688:	4611      	mov	r1, r2
 800168a:	2200      	movs	r2, #0
 800168c:	602a      	str	r2, [r5, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	f7ff f859 	bl	8000746 <_read>
 8001694:	1c43      	adds	r3, r0, #1
 8001696:	d102      	bne.n	800169e <_read_r+0x1e>
 8001698:	682b      	ldr	r3, [r5, #0]
 800169a:	b103      	cbz	r3, 800169e <_read_r+0x1e>
 800169c:	6023      	str	r3, [r4, #0]
 800169e:	bd38      	pop	{r3, r4, r5, pc}
 80016a0:	200001cc 	.word	0x200001cc

080016a4 <_write_r>:
 80016a4:	b538      	push	{r3, r4, r5, lr}
 80016a6:	4d07      	ldr	r5, [pc, #28]	@ (80016c4 <_write_r+0x20>)
 80016a8:	4604      	mov	r4, r0
 80016aa:	4608      	mov	r0, r1
 80016ac:	4611      	mov	r1, r2
 80016ae:	2200      	movs	r2, #0
 80016b0:	602a      	str	r2, [r5, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	f7ff f864 	bl	8000780 <_write>
 80016b8:	1c43      	adds	r3, r0, #1
 80016ba:	d102      	bne.n	80016c2 <_write_r+0x1e>
 80016bc:	682b      	ldr	r3, [r5, #0]
 80016be:	b103      	cbz	r3, 80016c2 <_write_r+0x1e>
 80016c0:	6023      	str	r3, [r4, #0]
 80016c2:	bd38      	pop	{r3, r4, r5, pc}
 80016c4:	200001cc 	.word	0x200001cc

080016c8 <__errno>:
 80016c8:	4b01      	ldr	r3, [pc, #4]	@ (80016d0 <__errno+0x8>)
 80016ca:	6818      	ldr	r0, [r3, #0]
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000018 	.word	0x20000018

080016d4 <__libc_init_array>:
 80016d4:	b570      	push	{r4, r5, r6, lr}
 80016d6:	4d0d      	ldr	r5, [pc, #52]	@ (800170c <__libc_init_array+0x38>)
 80016d8:	4c0d      	ldr	r4, [pc, #52]	@ (8001710 <__libc_init_array+0x3c>)
 80016da:	1b64      	subs	r4, r4, r5
 80016dc:	10a4      	asrs	r4, r4, #2
 80016de:	2600      	movs	r6, #0
 80016e0:	42a6      	cmp	r6, r4
 80016e2:	d109      	bne.n	80016f8 <__libc_init_array+0x24>
 80016e4:	4d0b      	ldr	r5, [pc, #44]	@ (8001714 <__libc_init_array+0x40>)
 80016e6:	4c0c      	ldr	r4, [pc, #48]	@ (8001718 <__libc_init_array+0x44>)
 80016e8:	f000 fdb8 	bl	800225c <_init>
 80016ec:	1b64      	subs	r4, r4, r5
 80016ee:	10a4      	asrs	r4, r4, #2
 80016f0:	2600      	movs	r6, #0
 80016f2:	42a6      	cmp	r6, r4
 80016f4:	d105      	bne.n	8001702 <__libc_init_array+0x2e>
 80016f6:	bd70      	pop	{r4, r5, r6, pc}
 80016f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80016fc:	4798      	blx	r3
 80016fe:	3601      	adds	r6, #1
 8001700:	e7ee      	b.n	80016e0 <__libc_init_array+0xc>
 8001702:	f855 3b04 	ldr.w	r3, [r5], #4
 8001706:	4798      	blx	r3
 8001708:	3601      	adds	r6, #1
 800170a:	e7f2      	b.n	80016f2 <__libc_init_array+0x1e>
 800170c:	080022d4 	.word	0x080022d4
 8001710:	080022d4 	.word	0x080022d4
 8001714:	080022d4 	.word	0x080022d4
 8001718:	080022d8 	.word	0x080022d8

0800171c <__retarget_lock_init_recursive>:
 800171c:	4770      	bx	lr

0800171e <__retarget_lock_acquire_recursive>:
 800171e:	4770      	bx	lr

08001720 <__retarget_lock_release_recursive>:
 8001720:	4770      	bx	lr
	...

08001724 <_free_r>:
 8001724:	b538      	push	{r3, r4, r5, lr}
 8001726:	4605      	mov	r5, r0
 8001728:	2900      	cmp	r1, #0
 800172a:	d041      	beq.n	80017b0 <_free_r+0x8c>
 800172c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001730:	1f0c      	subs	r4, r1, #4
 8001732:	2b00      	cmp	r3, #0
 8001734:	bfb8      	it	lt
 8001736:	18e4      	addlt	r4, r4, r3
 8001738:	f000 f8e0 	bl	80018fc <__malloc_lock>
 800173c:	4a1d      	ldr	r2, [pc, #116]	@ (80017b4 <_free_r+0x90>)
 800173e:	6813      	ldr	r3, [r2, #0]
 8001740:	b933      	cbnz	r3, 8001750 <_free_r+0x2c>
 8001742:	6063      	str	r3, [r4, #4]
 8001744:	6014      	str	r4, [r2, #0]
 8001746:	4628      	mov	r0, r5
 8001748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800174c:	f000 b8dc 	b.w	8001908 <__malloc_unlock>
 8001750:	42a3      	cmp	r3, r4
 8001752:	d908      	bls.n	8001766 <_free_r+0x42>
 8001754:	6820      	ldr	r0, [r4, #0]
 8001756:	1821      	adds	r1, r4, r0
 8001758:	428b      	cmp	r3, r1
 800175a:	bf01      	itttt	eq
 800175c:	6819      	ldreq	r1, [r3, #0]
 800175e:	685b      	ldreq	r3, [r3, #4]
 8001760:	1809      	addeq	r1, r1, r0
 8001762:	6021      	streq	r1, [r4, #0]
 8001764:	e7ed      	b.n	8001742 <_free_r+0x1e>
 8001766:	461a      	mov	r2, r3
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	b10b      	cbz	r3, 8001770 <_free_r+0x4c>
 800176c:	42a3      	cmp	r3, r4
 800176e:	d9fa      	bls.n	8001766 <_free_r+0x42>
 8001770:	6811      	ldr	r1, [r2, #0]
 8001772:	1850      	adds	r0, r2, r1
 8001774:	42a0      	cmp	r0, r4
 8001776:	d10b      	bne.n	8001790 <_free_r+0x6c>
 8001778:	6820      	ldr	r0, [r4, #0]
 800177a:	4401      	add	r1, r0
 800177c:	1850      	adds	r0, r2, r1
 800177e:	4283      	cmp	r3, r0
 8001780:	6011      	str	r1, [r2, #0]
 8001782:	d1e0      	bne.n	8001746 <_free_r+0x22>
 8001784:	6818      	ldr	r0, [r3, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	6053      	str	r3, [r2, #4]
 800178a:	4408      	add	r0, r1
 800178c:	6010      	str	r0, [r2, #0]
 800178e:	e7da      	b.n	8001746 <_free_r+0x22>
 8001790:	d902      	bls.n	8001798 <_free_r+0x74>
 8001792:	230c      	movs	r3, #12
 8001794:	602b      	str	r3, [r5, #0]
 8001796:	e7d6      	b.n	8001746 <_free_r+0x22>
 8001798:	6820      	ldr	r0, [r4, #0]
 800179a:	1821      	adds	r1, r4, r0
 800179c:	428b      	cmp	r3, r1
 800179e:	bf04      	itt	eq
 80017a0:	6819      	ldreq	r1, [r3, #0]
 80017a2:	685b      	ldreq	r3, [r3, #4]
 80017a4:	6063      	str	r3, [r4, #4]
 80017a6:	bf04      	itt	eq
 80017a8:	1809      	addeq	r1, r1, r0
 80017aa:	6021      	streq	r1, [r4, #0]
 80017ac:	6054      	str	r4, [r2, #4]
 80017ae:	e7ca      	b.n	8001746 <_free_r+0x22>
 80017b0:	bd38      	pop	{r3, r4, r5, pc}
 80017b2:	bf00      	nop
 80017b4:	200001d8 	.word	0x200001d8

080017b8 <sbrk_aligned>:
 80017b8:	b570      	push	{r4, r5, r6, lr}
 80017ba:	4e0f      	ldr	r6, [pc, #60]	@ (80017f8 <sbrk_aligned+0x40>)
 80017bc:	460c      	mov	r4, r1
 80017be:	6831      	ldr	r1, [r6, #0]
 80017c0:	4605      	mov	r5, r0
 80017c2:	b911      	cbnz	r1, 80017ca <sbrk_aligned+0x12>
 80017c4:	f000 fcb6 	bl	8002134 <_sbrk_r>
 80017c8:	6030      	str	r0, [r6, #0]
 80017ca:	4621      	mov	r1, r4
 80017cc:	4628      	mov	r0, r5
 80017ce:	f000 fcb1 	bl	8002134 <_sbrk_r>
 80017d2:	1c43      	adds	r3, r0, #1
 80017d4:	d103      	bne.n	80017de <sbrk_aligned+0x26>
 80017d6:	f04f 34ff 	mov.w	r4, #4294967295
 80017da:	4620      	mov	r0, r4
 80017dc:	bd70      	pop	{r4, r5, r6, pc}
 80017de:	1cc4      	adds	r4, r0, #3
 80017e0:	f024 0403 	bic.w	r4, r4, #3
 80017e4:	42a0      	cmp	r0, r4
 80017e6:	d0f8      	beq.n	80017da <sbrk_aligned+0x22>
 80017e8:	1a21      	subs	r1, r4, r0
 80017ea:	4628      	mov	r0, r5
 80017ec:	f000 fca2 	bl	8002134 <_sbrk_r>
 80017f0:	3001      	adds	r0, #1
 80017f2:	d1f2      	bne.n	80017da <sbrk_aligned+0x22>
 80017f4:	e7ef      	b.n	80017d6 <sbrk_aligned+0x1e>
 80017f6:	bf00      	nop
 80017f8:	200001d4 	.word	0x200001d4

080017fc <_malloc_r>:
 80017fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001800:	1ccd      	adds	r5, r1, #3
 8001802:	f025 0503 	bic.w	r5, r5, #3
 8001806:	3508      	adds	r5, #8
 8001808:	2d0c      	cmp	r5, #12
 800180a:	bf38      	it	cc
 800180c:	250c      	movcc	r5, #12
 800180e:	2d00      	cmp	r5, #0
 8001810:	4606      	mov	r6, r0
 8001812:	db01      	blt.n	8001818 <_malloc_r+0x1c>
 8001814:	42a9      	cmp	r1, r5
 8001816:	d904      	bls.n	8001822 <_malloc_r+0x26>
 8001818:	230c      	movs	r3, #12
 800181a:	6033      	str	r3, [r6, #0]
 800181c:	2000      	movs	r0, #0
 800181e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001822:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80018f8 <_malloc_r+0xfc>
 8001826:	f000 f869 	bl	80018fc <__malloc_lock>
 800182a:	f8d8 3000 	ldr.w	r3, [r8]
 800182e:	461c      	mov	r4, r3
 8001830:	bb44      	cbnz	r4, 8001884 <_malloc_r+0x88>
 8001832:	4629      	mov	r1, r5
 8001834:	4630      	mov	r0, r6
 8001836:	f7ff ffbf 	bl	80017b8 <sbrk_aligned>
 800183a:	1c43      	adds	r3, r0, #1
 800183c:	4604      	mov	r4, r0
 800183e:	d158      	bne.n	80018f2 <_malloc_r+0xf6>
 8001840:	f8d8 4000 	ldr.w	r4, [r8]
 8001844:	4627      	mov	r7, r4
 8001846:	2f00      	cmp	r7, #0
 8001848:	d143      	bne.n	80018d2 <_malloc_r+0xd6>
 800184a:	2c00      	cmp	r4, #0
 800184c:	d04b      	beq.n	80018e6 <_malloc_r+0xea>
 800184e:	6823      	ldr	r3, [r4, #0]
 8001850:	4639      	mov	r1, r7
 8001852:	4630      	mov	r0, r6
 8001854:	eb04 0903 	add.w	r9, r4, r3
 8001858:	f000 fc6c 	bl	8002134 <_sbrk_r>
 800185c:	4581      	cmp	r9, r0
 800185e:	d142      	bne.n	80018e6 <_malloc_r+0xea>
 8001860:	6821      	ldr	r1, [r4, #0]
 8001862:	1a6d      	subs	r5, r5, r1
 8001864:	4629      	mov	r1, r5
 8001866:	4630      	mov	r0, r6
 8001868:	f7ff ffa6 	bl	80017b8 <sbrk_aligned>
 800186c:	3001      	adds	r0, #1
 800186e:	d03a      	beq.n	80018e6 <_malloc_r+0xea>
 8001870:	6823      	ldr	r3, [r4, #0]
 8001872:	442b      	add	r3, r5
 8001874:	6023      	str	r3, [r4, #0]
 8001876:	f8d8 3000 	ldr.w	r3, [r8]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	bb62      	cbnz	r2, 80018d8 <_malloc_r+0xdc>
 800187e:	f8c8 7000 	str.w	r7, [r8]
 8001882:	e00f      	b.n	80018a4 <_malloc_r+0xa8>
 8001884:	6822      	ldr	r2, [r4, #0]
 8001886:	1b52      	subs	r2, r2, r5
 8001888:	d420      	bmi.n	80018cc <_malloc_r+0xd0>
 800188a:	2a0b      	cmp	r2, #11
 800188c:	d917      	bls.n	80018be <_malloc_r+0xc2>
 800188e:	1961      	adds	r1, r4, r5
 8001890:	42a3      	cmp	r3, r4
 8001892:	6025      	str	r5, [r4, #0]
 8001894:	bf18      	it	ne
 8001896:	6059      	strne	r1, [r3, #4]
 8001898:	6863      	ldr	r3, [r4, #4]
 800189a:	bf08      	it	eq
 800189c:	f8c8 1000 	streq.w	r1, [r8]
 80018a0:	5162      	str	r2, [r4, r5]
 80018a2:	604b      	str	r3, [r1, #4]
 80018a4:	4630      	mov	r0, r6
 80018a6:	f000 f82f 	bl	8001908 <__malloc_unlock>
 80018aa:	f104 000b 	add.w	r0, r4, #11
 80018ae:	1d23      	adds	r3, r4, #4
 80018b0:	f020 0007 	bic.w	r0, r0, #7
 80018b4:	1ac2      	subs	r2, r0, r3
 80018b6:	bf1c      	itt	ne
 80018b8:	1a1b      	subne	r3, r3, r0
 80018ba:	50a3      	strne	r3, [r4, r2]
 80018bc:	e7af      	b.n	800181e <_malloc_r+0x22>
 80018be:	6862      	ldr	r2, [r4, #4]
 80018c0:	42a3      	cmp	r3, r4
 80018c2:	bf0c      	ite	eq
 80018c4:	f8c8 2000 	streq.w	r2, [r8]
 80018c8:	605a      	strne	r2, [r3, #4]
 80018ca:	e7eb      	b.n	80018a4 <_malloc_r+0xa8>
 80018cc:	4623      	mov	r3, r4
 80018ce:	6864      	ldr	r4, [r4, #4]
 80018d0:	e7ae      	b.n	8001830 <_malloc_r+0x34>
 80018d2:	463c      	mov	r4, r7
 80018d4:	687f      	ldr	r7, [r7, #4]
 80018d6:	e7b6      	b.n	8001846 <_malloc_r+0x4a>
 80018d8:	461a      	mov	r2, r3
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	42a3      	cmp	r3, r4
 80018de:	d1fb      	bne.n	80018d8 <_malloc_r+0xdc>
 80018e0:	2300      	movs	r3, #0
 80018e2:	6053      	str	r3, [r2, #4]
 80018e4:	e7de      	b.n	80018a4 <_malloc_r+0xa8>
 80018e6:	230c      	movs	r3, #12
 80018e8:	6033      	str	r3, [r6, #0]
 80018ea:	4630      	mov	r0, r6
 80018ec:	f000 f80c 	bl	8001908 <__malloc_unlock>
 80018f0:	e794      	b.n	800181c <_malloc_r+0x20>
 80018f2:	6005      	str	r5, [r0, #0]
 80018f4:	e7d6      	b.n	80018a4 <_malloc_r+0xa8>
 80018f6:	bf00      	nop
 80018f8:	200001d8 	.word	0x200001d8

080018fc <__malloc_lock>:
 80018fc:	4801      	ldr	r0, [pc, #4]	@ (8001904 <__malloc_lock+0x8>)
 80018fe:	f7ff bf0e 	b.w	800171e <__retarget_lock_acquire_recursive>
 8001902:	bf00      	nop
 8001904:	200001d0 	.word	0x200001d0

08001908 <__malloc_unlock>:
 8001908:	4801      	ldr	r0, [pc, #4]	@ (8001910 <__malloc_unlock+0x8>)
 800190a:	f7ff bf09 	b.w	8001720 <__retarget_lock_release_recursive>
 800190e:	bf00      	nop
 8001910:	200001d0 	.word	0x200001d0

08001914 <__sfputc_r>:
 8001914:	6893      	ldr	r3, [r2, #8]
 8001916:	3b01      	subs	r3, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	b410      	push	{r4}
 800191c:	6093      	str	r3, [r2, #8]
 800191e:	da08      	bge.n	8001932 <__sfputc_r+0x1e>
 8001920:	6994      	ldr	r4, [r2, #24]
 8001922:	42a3      	cmp	r3, r4
 8001924:	db01      	blt.n	800192a <__sfputc_r+0x16>
 8001926:	290a      	cmp	r1, #10
 8001928:	d103      	bne.n	8001932 <__sfputc_r+0x1e>
 800192a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800192e:	f000 bb6d 	b.w	800200c <__swbuf_r>
 8001932:	6813      	ldr	r3, [r2, #0]
 8001934:	1c58      	adds	r0, r3, #1
 8001936:	6010      	str	r0, [r2, #0]
 8001938:	7019      	strb	r1, [r3, #0]
 800193a:	4608      	mov	r0, r1
 800193c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001940:	4770      	bx	lr

08001942 <__sfputs_r>:
 8001942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001944:	4606      	mov	r6, r0
 8001946:	460f      	mov	r7, r1
 8001948:	4614      	mov	r4, r2
 800194a:	18d5      	adds	r5, r2, r3
 800194c:	42ac      	cmp	r4, r5
 800194e:	d101      	bne.n	8001954 <__sfputs_r+0x12>
 8001950:	2000      	movs	r0, #0
 8001952:	e007      	b.n	8001964 <__sfputs_r+0x22>
 8001954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001958:	463a      	mov	r2, r7
 800195a:	4630      	mov	r0, r6
 800195c:	f7ff ffda 	bl	8001914 <__sfputc_r>
 8001960:	1c43      	adds	r3, r0, #1
 8001962:	d1f3      	bne.n	800194c <__sfputs_r+0xa>
 8001964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001968 <_vfiprintf_r>:
 8001968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800196c:	460d      	mov	r5, r1
 800196e:	b09d      	sub	sp, #116	@ 0x74
 8001970:	4614      	mov	r4, r2
 8001972:	4698      	mov	r8, r3
 8001974:	4606      	mov	r6, r0
 8001976:	b118      	cbz	r0, 8001980 <_vfiprintf_r+0x18>
 8001978:	6a03      	ldr	r3, [r0, #32]
 800197a:	b90b      	cbnz	r3, 8001980 <_vfiprintf_r+0x18>
 800197c:	f7ff fdca 	bl	8001514 <__sinit>
 8001980:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001982:	07d9      	lsls	r1, r3, #31
 8001984:	d405      	bmi.n	8001992 <_vfiprintf_r+0x2a>
 8001986:	89ab      	ldrh	r3, [r5, #12]
 8001988:	059a      	lsls	r2, r3, #22
 800198a:	d402      	bmi.n	8001992 <_vfiprintf_r+0x2a>
 800198c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800198e:	f7ff fec6 	bl	800171e <__retarget_lock_acquire_recursive>
 8001992:	89ab      	ldrh	r3, [r5, #12]
 8001994:	071b      	lsls	r3, r3, #28
 8001996:	d501      	bpl.n	800199c <_vfiprintf_r+0x34>
 8001998:	692b      	ldr	r3, [r5, #16]
 800199a:	b99b      	cbnz	r3, 80019c4 <_vfiprintf_r+0x5c>
 800199c:	4629      	mov	r1, r5
 800199e:	4630      	mov	r0, r6
 80019a0:	f000 fb72 	bl	8002088 <__swsetup_r>
 80019a4:	b170      	cbz	r0, 80019c4 <_vfiprintf_r+0x5c>
 80019a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80019a8:	07dc      	lsls	r4, r3, #31
 80019aa:	d504      	bpl.n	80019b6 <_vfiprintf_r+0x4e>
 80019ac:	f04f 30ff 	mov.w	r0, #4294967295
 80019b0:	b01d      	add	sp, #116	@ 0x74
 80019b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019b6:	89ab      	ldrh	r3, [r5, #12]
 80019b8:	0598      	lsls	r0, r3, #22
 80019ba:	d4f7      	bmi.n	80019ac <_vfiprintf_r+0x44>
 80019bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80019be:	f7ff feaf 	bl	8001720 <__retarget_lock_release_recursive>
 80019c2:	e7f3      	b.n	80019ac <_vfiprintf_r+0x44>
 80019c4:	2300      	movs	r3, #0
 80019c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80019c8:	2320      	movs	r3, #32
 80019ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80019ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80019d2:	2330      	movs	r3, #48	@ 0x30
 80019d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001b84 <_vfiprintf_r+0x21c>
 80019d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80019dc:	f04f 0901 	mov.w	r9, #1
 80019e0:	4623      	mov	r3, r4
 80019e2:	469a      	mov	sl, r3
 80019e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80019e8:	b10a      	cbz	r2, 80019ee <_vfiprintf_r+0x86>
 80019ea:	2a25      	cmp	r2, #37	@ 0x25
 80019ec:	d1f9      	bne.n	80019e2 <_vfiprintf_r+0x7a>
 80019ee:	ebba 0b04 	subs.w	fp, sl, r4
 80019f2:	d00b      	beq.n	8001a0c <_vfiprintf_r+0xa4>
 80019f4:	465b      	mov	r3, fp
 80019f6:	4622      	mov	r2, r4
 80019f8:	4629      	mov	r1, r5
 80019fa:	4630      	mov	r0, r6
 80019fc:	f7ff ffa1 	bl	8001942 <__sfputs_r>
 8001a00:	3001      	adds	r0, #1
 8001a02:	f000 80a7 	beq.w	8001b54 <_vfiprintf_r+0x1ec>
 8001a06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001a08:	445a      	add	r2, fp
 8001a0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8001a0c:	f89a 3000 	ldrb.w	r3, [sl]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 809f 	beq.w	8001b54 <_vfiprintf_r+0x1ec>
 8001a16:	2300      	movs	r3, #0
 8001a18:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a20:	f10a 0a01 	add.w	sl, sl, #1
 8001a24:	9304      	str	r3, [sp, #16]
 8001a26:	9307      	str	r3, [sp, #28]
 8001a28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001a2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8001a2e:	4654      	mov	r4, sl
 8001a30:	2205      	movs	r2, #5
 8001a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a36:	4853      	ldr	r0, [pc, #332]	@ (8001b84 <_vfiprintf_r+0x21c>)
 8001a38:	f7fe fbd2 	bl	80001e0 <memchr>
 8001a3c:	9a04      	ldr	r2, [sp, #16]
 8001a3e:	b9d8      	cbnz	r0, 8001a78 <_vfiprintf_r+0x110>
 8001a40:	06d1      	lsls	r1, r2, #27
 8001a42:	bf44      	itt	mi
 8001a44:	2320      	movmi	r3, #32
 8001a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001a4a:	0713      	lsls	r3, r2, #28
 8001a4c:	bf44      	itt	mi
 8001a4e:	232b      	movmi	r3, #43	@ 0x2b
 8001a50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001a54:	f89a 3000 	ldrb.w	r3, [sl]
 8001a58:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a5a:	d015      	beq.n	8001a88 <_vfiprintf_r+0x120>
 8001a5c:	9a07      	ldr	r2, [sp, #28]
 8001a5e:	4654      	mov	r4, sl
 8001a60:	2000      	movs	r0, #0
 8001a62:	f04f 0c0a 	mov.w	ip, #10
 8001a66:	4621      	mov	r1, r4
 8001a68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a6c:	3b30      	subs	r3, #48	@ 0x30
 8001a6e:	2b09      	cmp	r3, #9
 8001a70:	d94b      	bls.n	8001b0a <_vfiprintf_r+0x1a2>
 8001a72:	b1b0      	cbz	r0, 8001aa2 <_vfiprintf_r+0x13a>
 8001a74:	9207      	str	r2, [sp, #28]
 8001a76:	e014      	b.n	8001aa2 <_vfiprintf_r+0x13a>
 8001a78:	eba0 0308 	sub.w	r3, r0, r8
 8001a7c:	fa09 f303 	lsl.w	r3, r9, r3
 8001a80:	4313      	orrs	r3, r2
 8001a82:	9304      	str	r3, [sp, #16]
 8001a84:	46a2      	mov	sl, r4
 8001a86:	e7d2      	b.n	8001a2e <_vfiprintf_r+0xc6>
 8001a88:	9b03      	ldr	r3, [sp, #12]
 8001a8a:	1d19      	adds	r1, r3, #4
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	9103      	str	r1, [sp, #12]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	bfbb      	ittet	lt
 8001a94:	425b      	neglt	r3, r3
 8001a96:	f042 0202 	orrlt.w	r2, r2, #2
 8001a9a:	9307      	strge	r3, [sp, #28]
 8001a9c:	9307      	strlt	r3, [sp, #28]
 8001a9e:	bfb8      	it	lt
 8001aa0:	9204      	strlt	r2, [sp, #16]
 8001aa2:	7823      	ldrb	r3, [r4, #0]
 8001aa4:	2b2e      	cmp	r3, #46	@ 0x2e
 8001aa6:	d10a      	bne.n	8001abe <_vfiprintf_r+0x156>
 8001aa8:	7863      	ldrb	r3, [r4, #1]
 8001aaa:	2b2a      	cmp	r3, #42	@ 0x2a
 8001aac:	d132      	bne.n	8001b14 <_vfiprintf_r+0x1ac>
 8001aae:	9b03      	ldr	r3, [sp, #12]
 8001ab0:	1d1a      	adds	r2, r3, #4
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	9203      	str	r2, [sp, #12]
 8001ab6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001aba:	3402      	adds	r4, #2
 8001abc:	9305      	str	r3, [sp, #20]
 8001abe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001b94 <_vfiprintf_r+0x22c>
 8001ac2:	7821      	ldrb	r1, [r4, #0]
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	4650      	mov	r0, sl
 8001ac8:	f7fe fb8a 	bl	80001e0 <memchr>
 8001acc:	b138      	cbz	r0, 8001ade <_vfiprintf_r+0x176>
 8001ace:	9b04      	ldr	r3, [sp, #16]
 8001ad0:	eba0 000a 	sub.w	r0, r0, sl
 8001ad4:	2240      	movs	r2, #64	@ 0x40
 8001ad6:	4082      	lsls	r2, r0
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	3401      	adds	r4, #1
 8001adc:	9304      	str	r3, [sp, #16]
 8001ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ae2:	4829      	ldr	r0, [pc, #164]	@ (8001b88 <_vfiprintf_r+0x220>)
 8001ae4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001ae8:	2206      	movs	r2, #6
 8001aea:	f7fe fb79 	bl	80001e0 <memchr>
 8001aee:	2800      	cmp	r0, #0
 8001af0:	d03f      	beq.n	8001b72 <_vfiprintf_r+0x20a>
 8001af2:	4b26      	ldr	r3, [pc, #152]	@ (8001b8c <_vfiprintf_r+0x224>)
 8001af4:	bb1b      	cbnz	r3, 8001b3e <_vfiprintf_r+0x1d6>
 8001af6:	9b03      	ldr	r3, [sp, #12]
 8001af8:	3307      	adds	r3, #7
 8001afa:	f023 0307 	bic.w	r3, r3, #7
 8001afe:	3308      	adds	r3, #8
 8001b00:	9303      	str	r3, [sp, #12]
 8001b02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001b04:	443b      	add	r3, r7
 8001b06:	9309      	str	r3, [sp, #36]	@ 0x24
 8001b08:	e76a      	b.n	80019e0 <_vfiprintf_r+0x78>
 8001b0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8001b0e:	460c      	mov	r4, r1
 8001b10:	2001      	movs	r0, #1
 8001b12:	e7a8      	b.n	8001a66 <_vfiprintf_r+0xfe>
 8001b14:	2300      	movs	r3, #0
 8001b16:	3401      	adds	r4, #1
 8001b18:	9305      	str	r3, [sp, #20]
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f04f 0c0a 	mov.w	ip, #10
 8001b20:	4620      	mov	r0, r4
 8001b22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b26:	3a30      	subs	r2, #48	@ 0x30
 8001b28:	2a09      	cmp	r2, #9
 8001b2a:	d903      	bls.n	8001b34 <_vfiprintf_r+0x1cc>
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0c6      	beq.n	8001abe <_vfiprintf_r+0x156>
 8001b30:	9105      	str	r1, [sp, #20]
 8001b32:	e7c4      	b.n	8001abe <_vfiprintf_r+0x156>
 8001b34:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b38:	4604      	mov	r4, r0
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e7f0      	b.n	8001b20 <_vfiprintf_r+0x1b8>
 8001b3e:	ab03      	add	r3, sp, #12
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	462a      	mov	r2, r5
 8001b44:	4b12      	ldr	r3, [pc, #72]	@ (8001b90 <_vfiprintf_r+0x228>)
 8001b46:	a904      	add	r1, sp, #16
 8001b48:	4630      	mov	r0, r6
 8001b4a:	f3af 8000 	nop.w
 8001b4e:	4607      	mov	r7, r0
 8001b50:	1c78      	adds	r0, r7, #1
 8001b52:	d1d6      	bne.n	8001b02 <_vfiprintf_r+0x19a>
 8001b54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001b56:	07d9      	lsls	r1, r3, #31
 8001b58:	d405      	bmi.n	8001b66 <_vfiprintf_r+0x1fe>
 8001b5a:	89ab      	ldrh	r3, [r5, #12]
 8001b5c:	059a      	lsls	r2, r3, #22
 8001b5e:	d402      	bmi.n	8001b66 <_vfiprintf_r+0x1fe>
 8001b60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001b62:	f7ff fddd 	bl	8001720 <__retarget_lock_release_recursive>
 8001b66:	89ab      	ldrh	r3, [r5, #12]
 8001b68:	065b      	lsls	r3, r3, #25
 8001b6a:	f53f af1f 	bmi.w	80019ac <_vfiprintf_r+0x44>
 8001b6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001b70:	e71e      	b.n	80019b0 <_vfiprintf_r+0x48>
 8001b72:	ab03      	add	r3, sp, #12
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	462a      	mov	r2, r5
 8001b78:	4b05      	ldr	r3, [pc, #20]	@ (8001b90 <_vfiprintf_r+0x228>)
 8001b7a:	a904      	add	r1, sp, #16
 8001b7c:	4630      	mov	r0, r6
 8001b7e:	f000 f879 	bl	8001c74 <_printf_i>
 8001b82:	e7e4      	b.n	8001b4e <_vfiprintf_r+0x1e6>
 8001b84:	08002298 	.word	0x08002298
 8001b88:	080022a2 	.word	0x080022a2
 8001b8c:	00000000 	.word	0x00000000
 8001b90:	08001943 	.word	0x08001943
 8001b94:	0800229e 	.word	0x0800229e

08001b98 <_printf_common>:
 8001b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b9c:	4616      	mov	r6, r2
 8001b9e:	4698      	mov	r8, r3
 8001ba0:	688a      	ldr	r2, [r1, #8]
 8001ba2:	690b      	ldr	r3, [r1, #16]
 8001ba4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	bfb8      	it	lt
 8001bac:	4613      	movlt	r3, r2
 8001bae:	6033      	str	r3, [r6, #0]
 8001bb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001bb4:	4607      	mov	r7, r0
 8001bb6:	460c      	mov	r4, r1
 8001bb8:	b10a      	cbz	r2, 8001bbe <_printf_common+0x26>
 8001bba:	3301      	adds	r3, #1
 8001bbc:	6033      	str	r3, [r6, #0]
 8001bbe:	6823      	ldr	r3, [r4, #0]
 8001bc0:	0699      	lsls	r1, r3, #26
 8001bc2:	bf42      	ittt	mi
 8001bc4:	6833      	ldrmi	r3, [r6, #0]
 8001bc6:	3302      	addmi	r3, #2
 8001bc8:	6033      	strmi	r3, [r6, #0]
 8001bca:	6825      	ldr	r5, [r4, #0]
 8001bcc:	f015 0506 	ands.w	r5, r5, #6
 8001bd0:	d106      	bne.n	8001be0 <_printf_common+0x48>
 8001bd2:	f104 0a19 	add.w	sl, r4, #25
 8001bd6:	68e3      	ldr	r3, [r4, #12]
 8001bd8:	6832      	ldr	r2, [r6, #0]
 8001bda:	1a9b      	subs	r3, r3, r2
 8001bdc:	42ab      	cmp	r3, r5
 8001bde:	dc26      	bgt.n	8001c2e <_printf_common+0x96>
 8001be0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001be4:	6822      	ldr	r2, [r4, #0]
 8001be6:	3b00      	subs	r3, #0
 8001be8:	bf18      	it	ne
 8001bea:	2301      	movne	r3, #1
 8001bec:	0692      	lsls	r2, r2, #26
 8001bee:	d42b      	bmi.n	8001c48 <_printf_common+0xb0>
 8001bf0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001bf4:	4641      	mov	r1, r8
 8001bf6:	4638      	mov	r0, r7
 8001bf8:	47c8      	blx	r9
 8001bfa:	3001      	adds	r0, #1
 8001bfc:	d01e      	beq.n	8001c3c <_printf_common+0xa4>
 8001bfe:	6823      	ldr	r3, [r4, #0]
 8001c00:	6922      	ldr	r2, [r4, #16]
 8001c02:	f003 0306 	and.w	r3, r3, #6
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	bf02      	ittt	eq
 8001c0a:	68e5      	ldreq	r5, [r4, #12]
 8001c0c:	6833      	ldreq	r3, [r6, #0]
 8001c0e:	1aed      	subeq	r5, r5, r3
 8001c10:	68a3      	ldr	r3, [r4, #8]
 8001c12:	bf0c      	ite	eq
 8001c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c18:	2500      	movne	r5, #0
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	bfc4      	itt	gt
 8001c1e:	1a9b      	subgt	r3, r3, r2
 8001c20:	18ed      	addgt	r5, r5, r3
 8001c22:	2600      	movs	r6, #0
 8001c24:	341a      	adds	r4, #26
 8001c26:	42b5      	cmp	r5, r6
 8001c28:	d11a      	bne.n	8001c60 <_printf_common+0xc8>
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	e008      	b.n	8001c40 <_printf_common+0xa8>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	4652      	mov	r2, sl
 8001c32:	4641      	mov	r1, r8
 8001c34:	4638      	mov	r0, r7
 8001c36:	47c8      	blx	r9
 8001c38:	3001      	adds	r0, #1
 8001c3a:	d103      	bne.n	8001c44 <_printf_common+0xac>
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c44:	3501      	adds	r5, #1
 8001c46:	e7c6      	b.n	8001bd6 <_printf_common+0x3e>
 8001c48:	18e1      	adds	r1, r4, r3
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	2030      	movs	r0, #48	@ 0x30
 8001c4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001c52:	4422      	add	r2, r4
 8001c54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001c58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	e7c7      	b.n	8001bf0 <_printf_common+0x58>
 8001c60:	2301      	movs	r3, #1
 8001c62:	4622      	mov	r2, r4
 8001c64:	4641      	mov	r1, r8
 8001c66:	4638      	mov	r0, r7
 8001c68:	47c8      	blx	r9
 8001c6a:	3001      	adds	r0, #1
 8001c6c:	d0e6      	beq.n	8001c3c <_printf_common+0xa4>
 8001c6e:	3601      	adds	r6, #1
 8001c70:	e7d9      	b.n	8001c26 <_printf_common+0x8e>
	...

08001c74 <_printf_i>:
 8001c74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c78:	7e0f      	ldrb	r7, [r1, #24]
 8001c7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001c7c:	2f78      	cmp	r7, #120	@ 0x78
 8001c7e:	4691      	mov	r9, r2
 8001c80:	4680      	mov	r8, r0
 8001c82:	460c      	mov	r4, r1
 8001c84:	469a      	mov	sl, r3
 8001c86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001c8a:	d807      	bhi.n	8001c9c <_printf_i+0x28>
 8001c8c:	2f62      	cmp	r7, #98	@ 0x62
 8001c8e:	d80a      	bhi.n	8001ca6 <_printf_i+0x32>
 8001c90:	2f00      	cmp	r7, #0
 8001c92:	f000 80d2 	beq.w	8001e3a <_printf_i+0x1c6>
 8001c96:	2f58      	cmp	r7, #88	@ 0x58
 8001c98:	f000 80b9 	beq.w	8001e0e <_printf_i+0x19a>
 8001c9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001ca0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001ca4:	e03a      	b.n	8001d1c <_printf_i+0xa8>
 8001ca6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001caa:	2b15      	cmp	r3, #21
 8001cac:	d8f6      	bhi.n	8001c9c <_printf_i+0x28>
 8001cae:	a101      	add	r1, pc, #4	@ (adr r1, 8001cb4 <_printf_i+0x40>)
 8001cb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001cb4:	08001d0d 	.word	0x08001d0d
 8001cb8:	08001d21 	.word	0x08001d21
 8001cbc:	08001c9d 	.word	0x08001c9d
 8001cc0:	08001c9d 	.word	0x08001c9d
 8001cc4:	08001c9d 	.word	0x08001c9d
 8001cc8:	08001c9d 	.word	0x08001c9d
 8001ccc:	08001d21 	.word	0x08001d21
 8001cd0:	08001c9d 	.word	0x08001c9d
 8001cd4:	08001c9d 	.word	0x08001c9d
 8001cd8:	08001c9d 	.word	0x08001c9d
 8001cdc:	08001c9d 	.word	0x08001c9d
 8001ce0:	08001e21 	.word	0x08001e21
 8001ce4:	08001d4b 	.word	0x08001d4b
 8001ce8:	08001ddb 	.word	0x08001ddb
 8001cec:	08001c9d 	.word	0x08001c9d
 8001cf0:	08001c9d 	.word	0x08001c9d
 8001cf4:	08001e43 	.word	0x08001e43
 8001cf8:	08001c9d 	.word	0x08001c9d
 8001cfc:	08001d4b 	.word	0x08001d4b
 8001d00:	08001c9d 	.word	0x08001c9d
 8001d04:	08001c9d 	.word	0x08001c9d
 8001d08:	08001de3 	.word	0x08001de3
 8001d0c:	6833      	ldr	r3, [r6, #0]
 8001d0e:	1d1a      	adds	r2, r3, #4
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6032      	str	r2, [r6, #0]
 8001d14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001d18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e09d      	b.n	8001e5c <_printf_i+0x1e8>
 8001d20:	6833      	ldr	r3, [r6, #0]
 8001d22:	6820      	ldr	r0, [r4, #0]
 8001d24:	1d19      	adds	r1, r3, #4
 8001d26:	6031      	str	r1, [r6, #0]
 8001d28:	0606      	lsls	r6, r0, #24
 8001d2a:	d501      	bpl.n	8001d30 <_printf_i+0xbc>
 8001d2c:	681d      	ldr	r5, [r3, #0]
 8001d2e:	e003      	b.n	8001d38 <_printf_i+0xc4>
 8001d30:	0645      	lsls	r5, r0, #25
 8001d32:	d5fb      	bpl.n	8001d2c <_printf_i+0xb8>
 8001d34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001d38:	2d00      	cmp	r5, #0
 8001d3a:	da03      	bge.n	8001d44 <_printf_i+0xd0>
 8001d3c:	232d      	movs	r3, #45	@ 0x2d
 8001d3e:	426d      	negs	r5, r5
 8001d40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001d44:	4859      	ldr	r0, [pc, #356]	@ (8001eac <_printf_i+0x238>)
 8001d46:	230a      	movs	r3, #10
 8001d48:	e011      	b.n	8001d6e <_printf_i+0xfa>
 8001d4a:	6821      	ldr	r1, [r4, #0]
 8001d4c:	6833      	ldr	r3, [r6, #0]
 8001d4e:	0608      	lsls	r0, r1, #24
 8001d50:	f853 5b04 	ldr.w	r5, [r3], #4
 8001d54:	d402      	bmi.n	8001d5c <_printf_i+0xe8>
 8001d56:	0649      	lsls	r1, r1, #25
 8001d58:	bf48      	it	mi
 8001d5a:	b2ad      	uxthmi	r5, r5
 8001d5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8001d5e:	4853      	ldr	r0, [pc, #332]	@ (8001eac <_printf_i+0x238>)
 8001d60:	6033      	str	r3, [r6, #0]
 8001d62:	bf14      	ite	ne
 8001d64:	230a      	movne	r3, #10
 8001d66:	2308      	moveq	r3, #8
 8001d68:	2100      	movs	r1, #0
 8001d6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001d6e:	6866      	ldr	r6, [r4, #4]
 8001d70:	60a6      	str	r6, [r4, #8]
 8001d72:	2e00      	cmp	r6, #0
 8001d74:	bfa2      	ittt	ge
 8001d76:	6821      	ldrge	r1, [r4, #0]
 8001d78:	f021 0104 	bicge.w	r1, r1, #4
 8001d7c:	6021      	strge	r1, [r4, #0]
 8001d7e:	b90d      	cbnz	r5, 8001d84 <_printf_i+0x110>
 8001d80:	2e00      	cmp	r6, #0
 8001d82:	d04b      	beq.n	8001e1c <_printf_i+0x1a8>
 8001d84:	4616      	mov	r6, r2
 8001d86:	fbb5 f1f3 	udiv	r1, r5, r3
 8001d8a:	fb03 5711 	mls	r7, r3, r1, r5
 8001d8e:	5dc7      	ldrb	r7, [r0, r7]
 8001d90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001d94:	462f      	mov	r7, r5
 8001d96:	42bb      	cmp	r3, r7
 8001d98:	460d      	mov	r5, r1
 8001d9a:	d9f4      	bls.n	8001d86 <_printf_i+0x112>
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d10b      	bne.n	8001db8 <_printf_i+0x144>
 8001da0:	6823      	ldr	r3, [r4, #0]
 8001da2:	07df      	lsls	r7, r3, #31
 8001da4:	d508      	bpl.n	8001db8 <_printf_i+0x144>
 8001da6:	6923      	ldr	r3, [r4, #16]
 8001da8:	6861      	ldr	r1, [r4, #4]
 8001daa:	4299      	cmp	r1, r3
 8001dac:	bfde      	ittt	le
 8001dae:	2330      	movle	r3, #48	@ 0x30
 8001db0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001db4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001db8:	1b92      	subs	r2, r2, r6
 8001dba:	6122      	str	r2, [r4, #16]
 8001dbc:	f8cd a000 	str.w	sl, [sp]
 8001dc0:	464b      	mov	r3, r9
 8001dc2:	aa03      	add	r2, sp, #12
 8001dc4:	4621      	mov	r1, r4
 8001dc6:	4640      	mov	r0, r8
 8001dc8:	f7ff fee6 	bl	8001b98 <_printf_common>
 8001dcc:	3001      	adds	r0, #1
 8001dce:	d14a      	bne.n	8001e66 <_printf_i+0x1f2>
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd4:	b004      	add	sp, #16
 8001dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dda:	6823      	ldr	r3, [r4, #0]
 8001ddc:	f043 0320 	orr.w	r3, r3, #32
 8001de0:	6023      	str	r3, [r4, #0]
 8001de2:	4833      	ldr	r0, [pc, #204]	@ (8001eb0 <_printf_i+0x23c>)
 8001de4:	2778      	movs	r7, #120	@ 0x78
 8001de6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001dea:	6823      	ldr	r3, [r4, #0]
 8001dec:	6831      	ldr	r1, [r6, #0]
 8001dee:	061f      	lsls	r7, r3, #24
 8001df0:	f851 5b04 	ldr.w	r5, [r1], #4
 8001df4:	d402      	bmi.n	8001dfc <_printf_i+0x188>
 8001df6:	065f      	lsls	r7, r3, #25
 8001df8:	bf48      	it	mi
 8001dfa:	b2ad      	uxthmi	r5, r5
 8001dfc:	6031      	str	r1, [r6, #0]
 8001dfe:	07d9      	lsls	r1, r3, #31
 8001e00:	bf44      	itt	mi
 8001e02:	f043 0320 	orrmi.w	r3, r3, #32
 8001e06:	6023      	strmi	r3, [r4, #0]
 8001e08:	b11d      	cbz	r5, 8001e12 <_printf_i+0x19e>
 8001e0a:	2310      	movs	r3, #16
 8001e0c:	e7ac      	b.n	8001d68 <_printf_i+0xf4>
 8001e0e:	4827      	ldr	r0, [pc, #156]	@ (8001eac <_printf_i+0x238>)
 8001e10:	e7e9      	b.n	8001de6 <_printf_i+0x172>
 8001e12:	6823      	ldr	r3, [r4, #0]
 8001e14:	f023 0320 	bic.w	r3, r3, #32
 8001e18:	6023      	str	r3, [r4, #0]
 8001e1a:	e7f6      	b.n	8001e0a <_printf_i+0x196>
 8001e1c:	4616      	mov	r6, r2
 8001e1e:	e7bd      	b.n	8001d9c <_printf_i+0x128>
 8001e20:	6833      	ldr	r3, [r6, #0]
 8001e22:	6825      	ldr	r5, [r4, #0]
 8001e24:	6961      	ldr	r1, [r4, #20]
 8001e26:	1d18      	adds	r0, r3, #4
 8001e28:	6030      	str	r0, [r6, #0]
 8001e2a:	062e      	lsls	r6, r5, #24
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	d501      	bpl.n	8001e34 <_printf_i+0x1c0>
 8001e30:	6019      	str	r1, [r3, #0]
 8001e32:	e002      	b.n	8001e3a <_printf_i+0x1c6>
 8001e34:	0668      	lsls	r0, r5, #25
 8001e36:	d5fb      	bpl.n	8001e30 <_printf_i+0x1bc>
 8001e38:	8019      	strh	r1, [r3, #0]
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	6123      	str	r3, [r4, #16]
 8001e3e:	4616      	mov	r6, r2
 8001e40:	e7bc      	b.n	8001dbc <_printf_i+0x148>
 8001e42:	6833      	ldr	r3, [r6, #0]
 8001e44:	1d1a      	adds	r2, r3, #4
 8001e46:	6032      	str	r2, [r6, #0]
 8001e48:	681e      	ldr	r6, [r3, #0]
 8001e4a:	6862      	ldr	r2, [r4, #4]
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	4630      	mov	r0, r6
 8001e50:	f7fe f9c6 	bl	80001e0 <memchr>
 8001e54:	b108      	cbz	r0, 8001e5a <_printf_i+0x1e6>
 8001e56:	1b80      	subs	r0, r0, r6
 8001e58:	6060      	str	r0, [r4, #4]
 8001e5a:	6863      	ldr	r3, [r4, #4]
 8001e5c:	6123      	str	r3, [r4, #16]
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e64:	e7aa      	b.n	8001dbc <_printf_i+0x148>
 8001e66:	6923      	ldr	r3, [r4, #16]
 8001e68:	4632      	mov	r2, r6
 8001e6a:	4649      	mov	r1, r9
 8001e6c:	4640      	mov	r0, r8
 8001e6e:	47d0      	blx	sl
 8001e70:	3001      	adds	r0, #1
 8001e72:	d0ad      	beq.n	8001dd0 <_printf_i+0x15c>
 8001e74:	6823      	ldr	r3, [r4, #0]
 8001e76:	079b      	lsls	r3, r3, #30
 8001e78:	d413      	bmi.n	8001ea2 <_printf_i+0x22e>
 8001e7a:	68e0      	ldr	r0, [r4, #12]
 8001e7c:	9b03      	ldr	r3, [sp, #12]
 8001e7e:	4298      	cmp	r0, r3
 8001e80:	bfb8      	it	lt
 8001e82:	4618      	movlt	r0, r3
 8001e84:	e7a6      	b.n	8001dd4 <_printf_i+0x160>
 8001e86:	2301      	movs	r3, #1
 8001e88:	4632      	mov	r2, r6
 8001e8a:	4649      	mov	r1, r9
 8001e8c:	4640      	mov	r0, r8
 8001e8e:	47d0      	blx	sl
 8001e90:	3001      	adds	r0, #1
 8001e92:	d09d      	beq.n	8001dd0 <_printf_i+0x15c>
 8001e94:	3501      	adds	r5, #1
 8001e96:	68e3      	ldr	r3, [r4, #12]
 8001e98:	9903      	ldr	r1, [sp, #12]
 8001e9a:	1a5b      	subs	r3, r3, r1
 8001e9c:	42ab      	cmp	r3, r5
 8001e9e:	dcf2      	bgt.n	8001e86 <_printf_i+0x212>
 8001ea0:	e7eb      	b.n	8001e7a <_printf_i+0x206>
 8001ea2:	2500      	movs	r5, #0
 8001ea4:	f104 0619 	add.w	r6, r4, #25
 8001ea8:	e7f5      	b.n	8001e96 <_printf_i+0x222>
 8001eaa:	bf00      	nop
 8001eac:	080022a9 	.word	0x080022a9
 8001eb0:	080022ba 	.word	0x080022ba

08001eb4 <__sflush_r>:
 8001eb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ebc:	0716      	lsls	r6, r2, #28
 8001ebe:	4605      	mov	r5, r0
 8001ec0:	460c      	mov	r4, r1
 8001ec2:	d454      	bmi.n	8001f6e <__sflush_r+0xba>
 8001ec4:	684b      	ldr	r3, [r1, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	dc02      	bgt.n	8001ed0 <__sflush_r+0x1c>
 8001eca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	dd48      	ble.n	8001f62 <__sflush_r+0xae>
 8001ed0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001ed2:	2e00      	cmp	r6, #0
 8001ed4:	d045      	beq.n	8001f62 <__sflush_r+0xae>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001edc:	682f      	ldr	r7, [r5, #0]
 8001ede:	6a21      	ldr	r1, [r4, #32]
 8001ee0:	602b      	str	r3, [r5, #0]
 8001ee2:	d030      	beq.n	8001f46 <__sflush_r+0x92>
 8001ee4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001ee6:	89a3      	ldrh	r3, [r4, #12]
 8001ee8:	0759      	lsls	r1, r3, #29
 8001eea:	d505      	bpl.n	8001ef8 <__sflush_r+0x44>
 8001eec:	6863      	ldr	r3, [r4, #4]
 8001eee:	1ad2      	subs	r2, r2, r3
 8001ef0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001ef2:	b10b      	cbz	r3, 8001ef8 <__sflush_r+0x44>
 8001ef4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001ef6:	1ad2      	subs	r2, r2, r3
 8001ef8:	2300      	movs	r3, #0
 8001efa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001efc:	6a21      	ldr	r1, [r4, #32]
 8001efe:	4628      	mov	r0, r5
 8001f00:	47b0      	blx	r6
 8001f02:	1c43      	adds	r3, r0, #1
 8001f04:	89a3      	ldrh	r3, [r4, #12]
 8001f06:	d106      	bne.n	8001f16 <__sflush_r+0x62>
 8001f08:	6829      	ldr	r1, [r5, #0]
 8001f0a:	291d      	cmp	r1, #29
 8001f0c:	d82b      	bhi.n	8001f66 <__sflush_r+0xb2>
 8001f0e:	4a2a      	ldr	r2, [pc, #168]	@ (8001fb8 <__sflush_r+0x104>)
 8001f10:	410a      	asrs	r2, r1
 8001f12:	07d6      	lsls	r6, r2, #31
 8001f14:	d427      	bmi.n	8001f66 <__sflush_r+0xb2>
 8001f16:	2200      	movs	r2, #0
 8001f18:	6062      	str	r2, [r4, #4]
 8001f1a:	04d9      	lsls	r1, r3, #19
 8001f1c:	6922      	ldr	r2, [r4, #16]
 8001f1e:	6022      	str	r2, [r4, #0]
 8001f20:	d504      	bpl.n	8001f2c <__sflush_r+0x78>
 8001f22:	1c42      	adds	r2, r0, #1
 8001f24:	d101      	bne.n	8001f2a <__sflush_r+0x76>
 8001f26:	682b      	ldr	r3, [r5, #0]
 8001f28:	b903      	cbnz	r3, 8001f2c <__sflush_r+0x78>
 8001f2a:	6560      	str	r0, [r4, #84]	@ 0x54
 8001f2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001f2e:	602f      	str	r7, [r5, #0]
 8001f30:	b1b9      	cbz	r1, 8001f62 <__sflush_r+0xae>
 8001f32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001f36:	4299      	cmp	r1, r3
 8001f38:	d002      	beq.n	8001f40 <__sflush_r+0x8c>
 8001f3a:	4628      	mov	r0, r5
 8001f3c:	f7ff fbf2 	bl	8001724 <_free_r>
 8001f40:	2300      	movs	r3, #0
 8001f42:	6363      	str	r3, [r4, #52]	@ 0x34
 8001f44:	e00d      	b.n	8001f62 <__sflush_r+0xae>
 8001f46:	2301      	movs	r3, #1
 8001f48:	4628      	mov	r0, r5
 8001f4a:	47b0      	blx	r6
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	1c50      	adds	r0, r2, #1
 8001f50:	d1c9      	bne.n	8001ee6 <__sflush_r+0x32>
 8001f52:	682b      	ldr	r3, [r5, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0c6      	beq.n	8001ee6 <__sflush_r+0x32>
 8001f58:	2b1d      	cmp	r3, #29
 8001f5a:	d001      	beq.n	8001f60 <__sflush_r+0xac>
 8001f5c:	2b16      	cmp	r3, #22
 8001f5e:	d11e      	bne.n	8001f9e <__sflush_r+0xea>
 8001f60:	602f      	str	r7, [r5, #0]
 8001f62:	2000      	movs	r0, #0
 8001f64:	e022      	b.n	8001fac <__sflush_r+0xf8>
 8001f66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f6a:	b21b      	sxth	r3, r3
 8001f6c:	e01b      	b.n	8001fa6 <__sflush_r+0xf2>
 8001f6e:	690f      	ldr	r7, [r1, #16]
 8001f70:	2f00      	cmp	r7, #0
 8001f72:	d0f6      	beq.n	8001f62 <__sflush_r+0xae>
 8001f74:	0793      	lsls	r3, r2, #30
 8001f76:	680e      	ldr	r6, [r1, #0]
 8001f78:	bf08      	it	eq
 8001f7a:	694b      	ldreq	r3, [r1, #20]
 8001f7c:	600f      	str	r7, [r1, #0]
 8001f7e:	bf18      	it	ne
 8001f80:	2300      	movne	r3, #0
 8001f82:	eba6 0807 	sub.w	r8, r6, r7
 8001f86:	608b      	str	r3, [r1, #8]
 8001f88:	f1b8 0f00 	cmp.w	r8, #0
 8001f8c:	dde9      	ble.n	8001f62 <__sflush_r+0xae>
 8001f8e:	6a21      	ldr	r1, [r4, #32]
 8001f90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001f92:	4643      	mov	r3, r8
 8001f94:	463a      	mov	r2, r7
 8001f96:	4628      	mov	r0, r5
 8001f98:	47b0      	blx	r6
 8001f9a:	2800      	cmp	r0, #0
 8001f9c:	dc08      	bgt.n	8001fb0 <__sflush_r+0xfc>
 8001f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fa6:	81a3      	strh	r3, [r4, #12]
 8001fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fb0:	4407      	add	r7, r0
 8001fb2:	eba8 0800 	sub.w	r8, r8, r0
 8001fb6:	e7e7      	b.n	8001f88 <__sflush_r+0xd4>
 8001fb8:	dfbffffe 	.word	0xdfbffffe

08001fbc <_fflush_r>:
 8001fbc:	b538      	push	{r3, r4, r5, lr}
 8001fbe:	690b      	ldr	r3, [r1, #16]
 8001fc0:	4605      	mov	r5, r0
 8001fc2:	460c      	mov	r4, r1
 8001fc4:	b913      	cbnz	r3, 8001fcc <_fflush_r+0x10>
 8001fc6:	2500      	movs	r5, #0
 8001fc8:	4628      	mov	r0, r5
 8001fca:	bd38      	pop	{r3, r4, r5, pc}
 8001fcc:	b118      	cbz	r0, 8001fd6 <_fflush_r+0x1a>
 8001fce:	6a03      	ldr	r3, [r0, #32]
 8001fd0:	b90b      	cbnz	r3, 8001fd6 <_fflush_r+0x1a>
 8001fd2:	f7ff fa9f 	bl	8001514 <__sinit>
 8001fd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f3      	beq.n	8001fc6 <_fflush_r+0xa>
 8001fde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001fe0:	07d0      	lsls	r0, r2, #31
 8001fe2:	d404      	bmi.n	8001fee <_fflush_r+0x32>
 8001fe4:	0599      	lsls	r1, r3, #22
 8001fe6:	d402      	bmi.n	8001fee <_fflush_r+0x32>
 8001fe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001fea:	f7ff fb98 	bl	800171e <__retarget_lock_acquire_recursive>
 8001fee:	4628      	mov	r0, r5
 8001ff0:	4621      	mov	r1, r4
 8001ff2:	f7ff ff5f 	bl	8001eb4 <__sflush_r>
 8001ff6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001ff8:	07da      	lsls	r2, r3, #31
 8001ffa:	4605      	mov	r5, r0
 8001ffc:	d4e4      	bmi.n	8001fc8 <_fflush_r+0xc>
 8001ffe:	89a3      	ldrh	r3, [r4, #12]
 8002000:	059b      	lsls	r3, r3, #22
 8002002:	d4e1      	bmi.n	8001fc8 <_fflush_r+0xc>
 8002004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002006:	f7ff fb8b 	bl	8001720 <__retarget_lock_release_recursive>
 800200a:	e7dd      	b.n	8001fc8 <_fflush_r+0xc>

0800200c <__swbuf_r>:
 800200c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800200e:	460e      	mov	r6, r1
 8002010:	4614      	mov	r4, r2
 8002012:	4605      	mov	r5, r0
 8002014:	b118      	cbz	r0, 800201e <__swbuf_r+0x12>
 8002016:	6a03      	ldr	r3, [r0, #32]
 8002018:	b90b      	cbnz	r3, 800201e <__swbuf_r+0x12>
 800201a:	f7ff fa7b 	bl	8001514 <__sinit>
 800201e:	69a3      	ldr	r3, [r4, #24]
 8002020:	60a3      	str	r3, [r4, #8]
 8002022:	89a3      	ldrh	r3, [r4, #12]
 8002024:	071a      	lsls	r2, r3, #28
 8002026:	d501      	bpl.n	800202c <__swbuf_r+0x20>
 8002028:	6923      	ldr	r3, [r4, #16]
 800202a:	b943      	cbnz	r3, 800203e <__swbuf_r+0x32>
 800202c:	4621      	mov	r1, r4
 800202e:	4628      	mov	r0, r5
 8002030:	f000 f82a 	bl	8002088 <__swsetup_r>
 8002034:	b118      	cbz	r0, 800203e <__swbuf_r+0x32>
 8002036:	f04f 37ff 	mov.w	r7, #4294967295
 800203a:	4638      	mov	r0, r7
 800203c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800203e:	6823      	ldr	r3, [r4, #0]
 8002040:	6922      	ldr	r2, [r4, #16]
 8002042:	1a98      	subs	r0, r3, r2
 8002044:	6963      	ldr	r3, [r4, #20]
 8002046:	b2f6      	uxtb	r6, r6
 8002048:	4283      	cmp	r3, r0
 800204a:	4637      	mov	r7, r6
 800204c:	dc05      	bgt.n	800205a <__swbuf_r+0x4e>
 800204e:	4621      	mov	r1, r4
 8002050:	4628      	mov	r0, r5
 8002052:	f7ff ffb3 	bl	8001fbc <_fflush_r>
 8002056:	2800      	cmp	r0, #0
 8002058:	d1ed      	bne.n	8002036 <__swbuf_r+0x2a>
 800205a:	68a3      	ldr	r3, [r4, #8]
 800205c:	3b01      	subs	r3, #1
 800205e:	60a3      	str	r3, [r4, #8]
 8002060:	6823      	ldr	r3, [r4, #0]
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	6022      	str	r2, [r4, #0]
 8002066:	701e      	strb	r6, [r3, #0]
 8002068:	6962      	ldr	r2, [r4, #20]
 800206a:	1c43      	adds	r3, r0, #1
 800206c:	429a      	cmp	r2, r3
 800206e:	d004      	beq.n	800207a <__swbuf_r+0x6e>
 8002070:	89a3      	ldrh	r3, [r4, #12]
 8002072:	07db      	lsls	r3, r3, #31
 8002074:	d5e1      	bpl.n	800203a <__swbuf_r+0x2e>
 8002076:	2e0a      	cmp	r6, #10
 8002078:	d1df      	bne.n	800203a <__swbuf_r+0x2e>
 800207a:	4621      	mov	r1, r4
 800207c:	4628      	mov	r0, r5
 800207e:	f7ff ff9d 	bl	8001fbc <_fflush_r>
 8002082:	2800      	cmp	r0, #0
 8002084:	d0d9      	beq.n	800203a <__swbuf_r+0x2e>
 8002086:	e7d6      	b.n	8002036 <__swbuf_r+0x2a>

08002088 <__swsetup_r>:
 8002088:	b538      	push	{r3, r4, r5, lr}
 800208a:	4b29      	ldr	r3, [pc, #164]	@ (8002130 <__swsetup_r+0xa8>)
 800208c:	4605      	mov	r5, r0
 800208e:	6818      	ldr	r0, [r3, #0]
 8002090:	460c      	mov	r4, r1
 8002092:	b118      	cbz	r0, 800209c <__swsetup_r+0x14>
 8002094:	6a03      	ldr	r3, [r0, #32]
 8002096:	b90b      	cbnz	r3, 800209c <__swsetup_r+0x14>
 8002098:	f7ff fa3c 	bl	8001514 <__sinit>
 800209c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020a0:	0719      	lsls	r1, r3, #28
 80020a2:	d422      	bmi.n	80020ea <__swsetup_r+0x62>
 80020a4:	06da      	lsls	r2, r3, #27
 80020a6:	d407      	bmi.n	80020b8 <__swsetup_r+0x30>
 80020a8:	2209      	movs	r2, #9
 80020aa:	602a      	str	r2, [r5, #0]
 80020ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020b0:	81a3      	strh	r3, [r4, #12]
 80020b2:	f04f 30ff 	mov.w	r0, #4294967295
 80020b6:	e033      	b.n	8002120 <__swsetup_r+0x98>
 80020b8:	0758      	lsls	r0, r3, #29
 80020ba:	d512      	bpl.n	80020e2 <__swsetup_r+0x5a>
 80020bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80020be:	b141      	cbz	r1, 80020d2 <__swsetup_r+0x4a>
 80020c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80020c4:	4299      	cmp	r1, r3
 80020c6:	d002      	beq.n	80020ce <__swsetup_r+0x46>
 80020c8:	4628      	mov	r0, r5
 80020ca:	f7ff fb2b 	bl	8001724 <_free_r>
 80020ce:	2300      	movs	r3, #0
 80020d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80020d2:	89a3      	ldrh	r3, [r4, #12]
 80020d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80020d8:	81a3      	strh	r3, [r4, #12]
 80020da:	2300      	movs	r3, #0
 80020dc:	6063      	str	r3, [r4, #4]
 80020de:	6923      	ldr	r3, [r4, #16]
 80020e0:	6023      	str	r3, [r4, #0]
 80020e2:	89a3      	ldrh	r3, [r4, #12]
 80020e4:	f043 0308 	orr.w	r3, r3, #8
 80020e8:	81a3      	strh	r3, [r4, #12]
 80020ea:	6923      	ldr	r3, [r4, #16]
 80020ec:	b94b      	cbnz	r3, 8002102 <__swsetup_r+0x7a>
 80020ee:	89a3      	ldrh	r3, [r4, #12]
 80020f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80020f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020f8:	d003      	beq.n	8002102 <__swsetup_r+0x7a>
 80020fa:	4621      	mov	r1, r4
 80020fc:	4628      	mov	r0, r5
 80020fe:	f000 f84f 	bl	80021a0 <__smakebuf_r>
 8002102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002106:	f013 0201 	ands.w	r2, r3, #1
 800210a:	d00a      	beq.n	8002122 <__swsetup_r+0x9a>
 800210c:	2200      	movs	r2, #0
 800210e:	60a2      	str	r2, [r4, #8]
 8002110:	6962      	ldr	r2, [r4, #20]
 8002112:	4252      	negs	r2, r2
 8002114:	61a2      	str	r2, [r4, #24]
 8002116:	6922      	ldr	r2, [r4, #16]
 8002118:	b942      	cbnz	r2, 800212c <__swsetup_r+0xa4>
 800211a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800211e:	d1c5      	bne.n	80020ac <__swsetup_r+0x24>
 8002120:	bd38      	pop	{r3, r4, r5, pc}
 8002122:	0799      	lsls	r1, r3, #30
 8002124:	bf58      	it	pl
 8002126:	6962      	ldrpl	r2, [r4, #20]
 8002128:	60a2      	str	r2, [r4, #8]
 800212a:	e7f4      	b.n	8002116 <__swsetup_r+0x8e>
 800212c:	2000      	movs	r0, #0
 800212e:	e7f7      	b.n	8002120 <__swsetup_r+0x98>
 8002130:	20000018 	.word	0x20000018

08002134 <_sbrk_r>:
 8002134:	b538      	push	{r3, r4, r5, lr}
 8002136:	4d06      	ldr	r5, [pc, #24]	@ (8002150 <_sbrk_r+0x1c>)
 8002138:	2300      	movs	r3, #0
 800213a:	4604      	mov	r4, r0
 800213c:	4608      	mov	r0, r1
 800213e:	602b      	str	r3, [r5, #0]
 8002140:	f7fe fb6e 	bl	8000820 <_sbrk>
 8002144:	1c43      	adds	r3, r0, #1
 8002146:	d102      	bne.n	800214e <_sbrk_r+0x1a>
 8002148:	682b      	ldr	r3, [r5, #0]
 800214a:	b103      	cbz	r3, 800214e <_sbrk_r+0x1a>
 800214c:	6023      	str	r3, [r4, #0]
 800214e:	bd38      	pop	{r3, r4, r5, pc}
 8002150:	200001cc 	.word	0x200001cc

08002154 <__swhatbuf_r>:
 8002154:	b570      	push	{r4, r5, r6, lr}
 8002156:	460c      	mov	r4, r1
 8002158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800215c:	2900      	cmp	r1, #0
 800215e:	b096      	sub	sp, #88	@ 0x58
 8002160:	4615      	mov	r5, r2
 8002162:	461e      	mov	r6, r3
 8002164:	da0d      	bge.n	8002182 <__swhatbuf_r+0x2e>
 8002166:	89a3      	ldrh	r3, [r4, #12]
 8002168:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800216c:	f04f 0100 	mov.w	r1, #0
 8002170:	bf14      	ite	ne
 8002172:	2340      	movne	r3, #64	@ 0x40
 8002174:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002178:	2000      	movs	r0, #0
 800217a:	6031      	str	r1, [r6, #0]
 800217c:	602b      	str	r3, [r5, #0]
 800217e:	b016      	add	sp, #88	@ 0x58
 8002180:	bd70      	pop	{r4, r5, r6, pc}
 8002182:	466a      	mov	r2, sp
 8002184:	f000 f848 	bl	8002218 <_fstat_r>
 8002188:	2800      	cmp	r0, #0
 800218a:	dbec      	blt.n	8002166 <__swhatbuf_r+0x12>
 800218c:	9901      	ldr	r1, [sp, #4]
 800218e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002192:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002196:	4259      	negs	r1, r3
 8002198:	4159      	adcs	r1, r3
 800219a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800219e:	e7eb      	b.n	8002178 <__swhatbuf_r+0x24>

080021a0 <__smakebuf_r>:
 80021a0:	898b      	ldrh	r3, [r1, #12]
 80021a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80021a4:	079d      	lsls	r5, r3, #30
 80021a6:	4606      	mov	r6, r0
 80021a8:	460c      	mov	r4, r1
 80021aa:	d507      	bpl.n	80021bc <__smakebuf_r+0x1c>
 80021ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80021b0:	6023      	str	r3, [r4, #0]
 80021b2:	6123      	str	r3, [r4, #16]
 80021b4:	2301      	movs	r3, #1
 80021b6:	6163      	str	r3, [r4, #20]
 80021b8:	b003      	add	sp, #12
 80021ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021bc:	ab01      	add	r3, sp, #4
 80021be:	466a      	mov	r2, sp
 80021c0:	f7ff ffc8 	bl	8002154 <__swhatbuf_r>
 80021c4:	9f00      	ldr	r7, [sp, #0]
 80021c6:	4605      	mov	r5, r0
 80021c8:	4639      	mov	r1, r7
 80021ca:	4630      	mov	r0, r6
 80021cc:	f7ff fb16 	bl	80017fc <_malloc_r>
 80021d0:	b948      	cbnz	r0, 80021e6 <__smakebuf_r+0x46>
 80021d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021d6:	059a      	lsls	r2, r3, #22
 80021d8:	d4ee      	bmi.n	80021b8 <__smakebuf_r+0x18>
 80021da:	f023 0303 	bic.w	r3, r3, #3
 80021de:	f043 0302 	orr.w	r3, r3, #2
 80021e2:	81a3      	strh	r3, [r4, #12]
 80021e4:	e7e2      	b.n	80021ac <__smakebuf_r+0xc>
 80021e6:	89a3      	ldrh	r3, [r4, #12]
 80021e8:	6020      	str	r0, [r4, #0]
 80021ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021ee:	81a3      	strh	r3, [r4, #12]
 80021f0:	9b01      	ldr	r3, [sp, #4]
 80021f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80021f6:	b15b      	cbz	r3, 8002210 <__smakebuf_r+0x70>
 80021f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021fc:	4630      	mov	r0, r6
 80021fe:	f000 f81d 	bl	800223c <_isatty_r>
 8002202:	b128      	cbz	r0, 8002210 <__smakebuf_r+0x70>
 8002204:	89a3      	ldrh	r3, [r4, #12]
 8002206:	f023 0303 	bic.w	r3, r3, #3
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	81a3      	strh	r3, [r4, #12]
 8002210:	89a3      	ldrh	r3, [r4, #12]
 8002212:	431d      	orrs	r5, r3
 8002214:	81a5      	strh	r5, [r4, #12]
 8002216:	e7cf      	b.n	80021b8 <__smakebuf_r+0x18>

08002218 <_fstat_r>:
 8002218:	b538      	push	{r3, r4, r5, lr}
 800221a:	4d07      	ldr	r5, [pc, #28]	@ (8002238 <_fstat_r+0x20>)
 800221c:	2300      	movs	r3, #0
 800221e:	4604      	mov	r4, r0
 8002220:	4608      	mov	r0, r1
 8002222:	4611      	mov	r1, r2
 8002224:	602b      	str	r3, [r5, #0]
 8002226:	f7fe fad3 	bl	80007d0 <_fstat>
 800222a:	1c43      	adds	r3, r0, #1
 800222c:	d102      	bne.n	8002234 <_fstat_r+0x1c>
 800222e:	682b      	ldr	r3, [r5, #0]
 8002230:	b103      	cbz	r3, 8002234 <_fstat_r+0x1c>
 8002232:	6023      	str	r3, [r4, #0]
 8002234:	bd38      	pop	{r3, r4, r5, pc}
 8002236:	bf00      	nop
 8002238:	200001cc 	.word	0x200001cc

0800223c <_isatty_r>:
 800223c:	b538      	push	{r3, r4, r5, lr}
 800223e:	4d06      	ldr	r5, [pc, #24]	@ (8002258 <_isatty_r+0x1c>)
 8002240:	2300      	movs	r3, #0
 8002242:	4604      	mov	r4, r0
 8002244:	4608      	mov	r0, r1
 8002246:	602b      	str	r3, [r5, #0]
 8002248:	f7fe fad2 	bl	80007f0 <_isatty>
 800224c:	1c43      	adds	r3, r0, #1
 800224e:	d102      	bne.n	8002256 <_isatty_r+0x1a>
 8002250:	682b      	ldr	r3, [r5, #0]
 8002252:	b103      	cbz	r3, 8002256 <_isatty_r+0x1a>
 8002254:	6023      	str	r3, [r4, #0]
 8002256:	bd38      	pop	{r3, r4, r5, pc}
 8002258:	200001cc 	.word	0x200001cc

0800225c <_init>:
 800225c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800225e:	bf00      	nop
 8002260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002262:	bc08      	pop	{r3}
 8002264:	469e      	mov	lr, r3
 8002266:	4770      	bx	lr

08002268 <_fini>:
 8002268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800226a:	bf00      	nop
 800226c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800226e:	bc08      	pop	{r3}
 8002270:	469e      	mov	lr, r3
 8002272:	4770      	bx	lr
